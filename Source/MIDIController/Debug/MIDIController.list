
MIDIController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08006d58  08006d58  00016d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dc4  08006dc4  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  08006dc4  08006dc4  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006dc4  08006dc4  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dc4  08006dc4  00016dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dc8  08006dc8  00016dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08006dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d4  20000164  08006f30  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000938  08006f30  00020938  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a779  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000249d  00000000  00000000  0002a949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  0002cde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000714  00000000  00000000  0002d7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a4e  00000000  00000000  0002deb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000daf2  00000000  00000000  00046902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000840c3  00000000  00000000  000543f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000253c  00000000  00000000  000d84b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000da9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000164 	.word	0x20000164
 8000128:	00000000 	.word	0x00000000
 800012c:	08006d40 	.word	0x08006d40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000168 	.word	0x20000168
 8000148:	08006d40 	.word	0x08006d40

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f91a 	bl	8000388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f805 	bl	8000162 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f85e 	bl	8000218 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f006 fa0c 	bl	8006578 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000160:	e7fe      	b.n	8000160 <main+0x14>

08000162 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000162:	b580      	push	{r7, lr}
 8000164:	b094      	sub	sp, #80	; 0x50
 8000166:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000168:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800016c:	2228      	movs	r2, #40	; 0x28
 800016e:	2100      	movs	r1, #0
 8000170:	4618      	mov	r0, r3
 8000172:	f006 fdb9 	bl	8006ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000176:	f107 0314 	add.w	r3, r7, #20
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	605a      	str	r2, [r3, #4]
 8000180:	609a      	str	r2, [r3, #8]
 8000182:	60da      	str	r2, [r3, #12]
 8000184:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000186:	1d3b      	adds	r3, r7, #4
 8000188:	2200      	movs	r2, #0
 800018a:	601a      	str	r2, [r3, #0]
 800018c:	605a      	str	r2, [r3, #4]
 800018e:	609a      	str	r2, [r3, #8]
 8000190:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000192:	2301      	movs	r3, #1
 8000194:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000196:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800019a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800019c:	2300      	movs	r3, #0
 800019e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a0:	2301      	movs	r3, #1
 80001a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a4:	2302      	movs	r3, #2
 80001a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80001b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001b8:	4618      	mov	r0, r3
 80001ba:	f001 ff9f 	bl	80020fc <HAL_RCC_OscConfig>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d001      	beq.n	80001c8 <SystemClock_Config+0x66>
    Error_Handler();
 80001c4:	f000 f84a 	bl	800025c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 80001c8:	230f      	movs	r3, #15
 80001ca:	617b      	str	r3, [r7, #20]
      | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001cc:	2302      	movs	r3, #2
 80001ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d0:	2300      	movs	r3, #0
 80001d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001d8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80001de:	f107 0314 	add.w	r3, r7, #20
 80001e2:	2102      	movs	r1, #2
 80001e4:	4618      	mov	r0, r3
 80001e6:	f002 fa0b 	bl	8002600 <HAL_RCC_ClockConfig>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <SystemClock_Config+0x92>
    Error_Handler();
 80001f0:	f000 f834 	bl	800025c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80001f4:	2310      	movs	r3, #16
 80001f6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80001f8:	2300      	movs	r3, #0
 80001fa:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	4618      	mov	r0, r3
 8000200:	f002 fb5a 	bl	80028b8 <HAL_RCCEx_PeriphCLKConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <SystemClock_Config+0xac>
    Error_Handler();
 800020a:	f000 f827 	bl	800025c <Error_Handler>
  }
}
 800020e:	bf00      	nop
 8000210:	3750      	adds	r7, #80	; 0x50
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
	...

08000218 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800021e:	4b0e      	ldr	r3, [pc, #56]	; (8000258 <MX_GPIO_Init+0x40>)
 8000220:	699b      	ldr	r3, [r3, #24]
 8000222:	4a0d      	ldr	r2, [pc, #52]	; (8000258 <MX_GPIO_Init+0x40>)
 8000224:	f043 0320 	orr.w	r3, r3, #32
 8000228:	6193      	str	r3, [r2, #24]
 800022a:	4b0b      	ldr	r3, [pc, #44]	; (8000258 <MX_GPIO_Init+0x40>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	f003 0320 	and.w	r3, r3, #32
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000236:	4b08      	ldr	r3, [pc, #32]	; (8000258 <MX_GPIO_Init+0x40>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	4a07      	ldr	r2, [pc, #28]	; (8000258 <MX_GPIO_Init+0x40>)
 800023c:	f043 0304 	orr.w	r3, r3, #4
 8000240:	6193      	str	r3, [r2, #24]
 8000242:	4b05      	ldr	r3, [pc, #20]	; (8000258 <MX_GPIO_Init+0x40>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	f003 0304 	and.w	r3, r3, #4
 800024a:	603b      	str	r3, [r7, #0]
 800024c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800024e:	bf00      	nop
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	40021000 	.word	0x40021000

0800025c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000260:	b672      	cpsid	i
}
 8000262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000264:	e7fe      	b.n	8000264 <Error_Handler+0x8>
	...

08000268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800026e:	4b15      	ldr	r3, [pc, #84]	; (80002c4 <HAL_MspInit+0x5c>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	4a14      	ldr	r2, [pc, #80]	; (80002c4 <HAL_MspInit+0x5c>)
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	6193      	str	r3, [r2, #24]
 800027a:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <HAL_MspInit+0x5c>)
 800027c:	699b      	ldr	r3, [r3, #24]
 800027e:	f003 0301 	and.w	r3, r3, #1
 8000282:	60bb      	str	r3, [r7, #8]
 8000284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000286:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <HAL_MspInit+0x5c>)
 8000288:	69db      	ldr	r3, [r3, #28]
 800028a:	4a0e      	ldr	r2, [pc, #56]	; (80002c4 <HAL_MspInit+0x5c>)
 800028c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000290:	61d3      	str	r3, [r2, #28]
 8000292:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <HAL_MspInit+0x5c>)
 8000294:	69db      	ldr	r3, [r3, #28]
 8000296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800029a:	607b      	str	r3, [r7, #4]
 800029c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800029e:	4b0a      	ldr	r3, [pc, #40]	; (80002c8 <HAL_MspInit+0x60>)
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80002aa:	60fb      	str	r3, [r7, #12]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <HAL_MspInit+0x60>)
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002ba:	bf00      	nop
 80002bc:	3714      	adds	r7, #20
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	40021000 	.word	0x40021000
 80002c8:	40010000 	.word	0x40010000

080002cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002d0:	e7fe      	b.n	80002d0 <NMI_Handler+0x4>

080002d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002d2:	b480      	push	{r7}
 80002d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002d6:	e7fe      	b.n	80002d6 <HardFault_Handler+0x4>

080002d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002dc:	e7fe      	b.n	80002dc <MemManage_Handler+0x4>

080002de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002de:	b480      	push	{r7}
 80002e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002e2:	e7fe      	b.n	80002e2 <BusFault_Handler+0x4>

080002e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002e8:	e7fe      	b.n	80002e8 <UsageFault_Handler+0x4>

080002ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002ea:	b480      	push	{r7}
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr

080002f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002f6:	b480      	push	{r7}
 80002f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002fa:	bf00      	nop
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr

08000302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000302:	b480      	push	{r7}
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000306:	bf00      	nop
 8000308:	46bd      	mov	sp, r7
 800030a:	bc80      	pop	{r7}
 800030c:	4770      	bx	lr

0800030e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800030e:	b580      	push	{r7, lr}
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000312:	f000 f87f 	bl	8000414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000320:	4802      	ldr	r0, [pc, #8]	; (800032c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000322:	f000 fabc 	bl	800089e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	2000064c 	.word	0x2000064c

08000330 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr

0800033c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800033c:	f7ff fff8 	bl	8000330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000340:	480b      	ldr	r0, [pc, #44]	; (8000370 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000342:	490c      	ldr	r1, [pc, #48]	; (8000374 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000344:	4a0c      	ldr	r2, [pc, #48]	; (8000378 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000348:	e002      	b.n	8000350 <LoopCopyDataInit>

0800034a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800034c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034e:	3304      	adds	r3, #4

08000350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000354:	d3f9      	bcc.n	800034a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000356:	4a09      	ldr	r2, [pc, #36]	; (800037c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000358:	4c09      	ldr	r4, [pc, #36]	; (8000380 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800035c:	e001      	b.n	8000362 <LoopFillZerobss>

0800035e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000360:	3204      	adds	r2, #4

08000362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000364:	d3fb      	bcc.n	800035e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000366:	f006 fcc7 	bl	8006cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036a:	f7ff feef 	bl	800014c <main>
  bx lr
 800036e:	4770      	bx	lr
  ldr r0, =_sdata
 8000370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000374:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000378:	08006dcc 	.word	0x08006dcc
  ldr r2, =_sbss
 800037c:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000380:	20000938 	.word	0x20000938

08000384 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000384:	e7fe      	b.n	8000384 <ADC1_2_IRQHandler>
	...

08000388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <HAL_Init+0x28>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a07      	ldr	r2, [pc, #28]	; (80003b0 <HAL_Init+0x28>)
 8000392:	f043 0310 	orr.w	r3, r3, #16
 8000396:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000398:	2003      	movs	r0, #3
 800039a:	f000 f923 	bl	80005e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800039e:	200f      	movs	r0, #15
 80003a0:	f000 f808 	bl	80003b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003a4:	f7ff ff60 	bl	8000268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003a8:	2300      	movs	r3, #0
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40022000 	.word	0x40022000

080003b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003bc:	4b12      	ldr	r3, [pc, #72]	; (8000408 <HAL_InitTick+0x54>)
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	4b12      	ldr	r3, [pc, #72]	; (800040c <HAL_InitTick+0x58>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	4619      	mov	r1, r3
 80003c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80003ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 f93b 	bl	800064e <HAL_SYSTICK_Config>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80003de:	2301      	movs	r3, #1
 80003e0:	e00e      	b.n	8000400 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2b0f      	cmp	r3, #15
 80003e6:	d80a      	bhi.n	80003fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003e8:	2200      	movs	r2, #0
 80003ea:	6879      	ldr	r1, [r7, #4]
 80003ec:	f04f 30ff 	mov.w	r0, #4294967295
 80003f0:	f000 f903 	bl	80005fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003f4:	4a06      	ldr	r2, [pc, #24]	; (8000410 <HAL_InitTick+0x5c>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80003fa:	2300      	movs	r3, #0
 80003fc:	e000      	b.n	8000400 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80003fe:	2301      	movs	r3, #1
}
 8000400:	4618      	mov	r0, r3
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000000 	.word	0x20000000
 800040c:	20000008 	.word	0x20000008
 8000410:	20000004 	.word	0x20000004

08000414 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <HAL_IncTick+0x1c>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	461a      	mov	r2, r3
 800041e:	4b05      	ldr	r3, [pc, #20]	; (8000434 <HAL_IncTick+0x20>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4413      	add	r3, r2
 8000424:	4a03      	ldr	r2, [pc, #12]	; (8000434 <HAL_IncTick+0x20>)
 8000426:	6013      	str	r3, [r2, #0]
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	20000008 	.word	0x20000008
 8000434:	20000180 	.word	0x20000180

08000438 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  return uwTick;
 800043c:	4b02      	ldr	r3, [pc, #8]	; (8000448 <HAL_GetTick+0x10>)
 800043e:	681b      	ldr	r3, [r3, #0]
}
 8000440:	4618      	mov	r0, r3
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	20000180 	.word	0x20000180

0800044c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	f003 0307 	and.w	r3, r3, #7
 800045a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <__NVIC_SetPriorityGrouping+0x44>)
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000462:	68ba      	ldr	r2, [r7, #8]
 8000464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000468:	4013      	ands	r3, r2
 800046a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800047c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800047e:	4a04      	ldr	r2, [pc, #16]	; (8000490 <__NVIC_SetPriorityGrouping+0x44>)
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	60d3      	str	r3, [r2, #12]
}
 8000484:	bf00      	nop
 8000486:	3714      	adds	r7, #20
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	e000ed00 	.word	0xe000ed00

08000494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000498:	4b04      	ldr	r3, [pc, #16]	; (80004ac <__NVIC_GetPriorityGrouping+0x18>)
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	0a1b      	lsrs	r3, r3, #8
 800049e:	f003 0307 	and.w	r3, r3, #7
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	e000ed00 	.word	0xe000ed00

080004b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	db0b      	blt.n	80004da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	f003 021f 	and.w	r2, r3, #31
 80004c8:	4906      	ldr	r1, [pc, #24]	; (80004e4 <__NVIC_EnableIRQ+0x34>)
 80004ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ce:	095b      	lsrs	r3, r3, #5
 80004d0:	2001      	movs	r0, #1
 80004d2:	fa00 f202 	lsl.w	r2, r0, r2
 80004d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	e000e100 	.word	0xe000e100

080004e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	6039      	str	r1, [r7, #0]
 80004f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	db0a      	blt.n	8000512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	b2da      	uxtb	r2, r3
 8000500:	490c      	ldr	r1, [pc, #48]	; (8000534 <__NVIC_SetPriority+0x4c>)
 8000502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000506:	0112      	lsls	r2, r2, #4
 8000508:	b2d2      	uxtb	r2, r2
 800050a:	440b      	add	r3, r1
 800050c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000510:	e00a      	b.n	8000528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	b2da      	uxtb	r2, r3
 8000516:	4908      	ldr	r1, [pc, #32]	; (8000538 <__NVIC_SetPriority+0x50>)
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	f003 030f 	and.w	r3, r3, #15
 800051e:	3b04      	subs	r3, #4
 8000520:	0112      	lsls	r2, r2, #4
 8000522:	b2d2      	uxtb	r2, r2
 8000524:	440b      	add	r3, r1
 8000526:	761a      	strb	r2, [r3, #24]
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	e000e100 	.word	0xe000e100
 8000538:	e000ed00 	.word	0xe000ed00

0800053c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800053c:	b480      	push	{r7}
 800053e:	b089      	sub	sp, #36	; 0x24
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	f003 0307 	and.w	r3, r3, #7
 800054e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	f1c3 0307 	rsb	r3, r3, #7
 8000556:	2b04      	cmp	r3, #4
 8000558:	bf28      	it	cs
 800055a:	2304      	movcs	r3, #4
 800055c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800055e:	69fb      	ldr	r3, [r7, #28]
 8000560:	3304      	adds	r3, #4
 8000562:	2b06      	cmp	r3, #6
 8000564:	d902      	bls.n	800056c <NVIC_EncodePriority+0x30>
 8000566:	69fb      	ldr	r3, [r7, #28]
 8000568:	3b03      	subs	r3, #3
 800056a:	e000      	b.n	800056e <NVIC_EncodePriority+0x32>
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000570:	f04f 32ff 	mov.w	r2, #4294967295
 8000574:	69bb      	ldr	r3, [r7, #24]
 8000576:	fa02 f303 	lsl.w	r3, r2, r3
 800057a:	43da      	mvns	r2, r3
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	401a      	ands	r2, r3
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000584:	f04f 31ff 	mov.w	r1, #4294967295
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	43d9      	mvns	r1, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000594:	4313      	orrs	r3, r2
         );
}
 8000596:	4618      	mov	r0, r3
 8000598:	3724      	adds	r7, #36	; 0x24
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3b01      	subs	r3, #1
 80005ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005b0:	d301      	bcc.n	80005b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005b2:	2301      	movs	r3, #1
 80005b4:	e00f      	b.n	80005d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005b6:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <SysTick_Config+0x40>)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3b01      	subs	r3, #1
 80005bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005be:	210f      	movs	r1, #15
 80005c0:	f04f 30ff 	mov.w	r0, #4294967295
 80005c4:	f7ff ff90 	bl	80004e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <SysTick_Config+0x40>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005ce:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <SysTick_Config+0x40>)
 80005d0:	2207      	movs	r2, #7
 80005d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005d4:	2300      	movs	r3, #0
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	e000e010 	.word	0xe000e010

080005e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f7ff ff2d 	bl	800044c <__NVIC_SetPriorityGrouping>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b086      	sub	sp, #24
 80005fe:	af00      	add	r7, sp, #0
 8000600:	4603      	mov	r3, r0
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	607a      	str	r2, [r7, #4]
 8000606:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800060c:	f7ff ff42 	bl	8000494 <__NVIC_GetPriorityGrouping>
 8000610:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	68b9      	ldr	r1, [r7, #8]
 8000616:	6978      	ldr	r0, [r7, #20]
 8000618:	f7ff ff90 	bl	800053c <NVIC_EncodePriority>
 800061c:	4602      	mov	r2, r0
 800061e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000622:	4611      	mov	r1, r2
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff ff5f 	bl	80004e8 <__NVIC_SetPriority>
}
 800062a:	bf00      	nop
 800062c:	3718      	adds	r7, #24
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
 8000638:	4603      	mov	r3, r0
 800063a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800063c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff35 	bl	80004b0 <__NVIC_EnableIRQ>
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b082      	sub	sp, #8
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f7ff ffa2 	bl	80005a0 <SysTick_Config>
 800065c:	4603      	mov	r3, r0
}
 800065e:	4618      	mov	r0, r3
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b084      	sub	sp, #16
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d101      	bne.n	8000678 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000674:	2301      	movs	r3, #1
 8000676:	e0e8      	b.n	800084a <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800067e:	b2db      	uxtb	r3, r3
 8000680:	2b00      	cmp	r3, #0
 8000682:	d106      	bne.n	8000692 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2200      	movs	r2, #0
 8000688:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f006 f8a7 	bl	80067e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2203      	movs	r2, #3
 8000696:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2200      	movs	r2, #0
 800069e:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 f9e0 	bl	8002a6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6818      	ldr	r0, [r3, #0]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	3304      	adds	r3, #4
 80006b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006b4:	f002 f9b6 	bl	8002a24 <USB_CoreInit>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d005      	beq.n	80006ca <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2202      	movs	r2, #2
 80006c2:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
 80006c8:	e0bf      	b.n	800084a <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2100      	movs	r1, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 f9e4 	bl	8002a9e <USB_SetCurrentMode>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d005      	beq.n	80006e8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2202      	movs	r2, #2
 80006e0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 80006e4:	2301      	movs	r3, #1
 80006e6:	e0b0      	b.n	800084a <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80006e8:	2300      	movs	r3, #0
 80006ea:	73fb      	strb	r3, [r7, #15]
 80006ec:	e03e      	b.n	800076c <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80006ee:	7bfa      	ldrb	r2, [r7, #15]
 80006f0:	6879      	ldr	r1, [r7, #4]
 80006f2:	4613      	mov	r3, r2
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	4413      	add	r3, r2
 80006f8:	00db      	lsls	r3, r3, #3
 80006fa:	440b      	add	r3, r1
 80006fc:	3311      	adds	r3, #17
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000702:	7bfa      	ldrb	r2, [r7, #15]
 8000704:	6879      	ldr	r1, [r7, #4]
 8000706:	4613      	mov	r3, r2
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	4413      	add	r3, r2
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	440b      	add	r3, r1
 8000710:	3310      	adds	r3, #16
 8000712:	7bfa      	ldrb	r2, [r7, #15]
 8000714:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000716:	7bfa      	ldrb	r2, [r7, #15]
 8000718:	6879      	ldr	r1, [r7, #4]
 800071a:	4613      	mov	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	4413      	add	r3, r2
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	440b      	add	r3, r1
 8000724:	3313      	adds	r3, #19
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800072a:	7bfa      	ldrb	r2, [r7, #15]
 800072c:	6879      	ldr	r1, [r7, #4]
 800072e:	4613      	mov	r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	4413      	add	r3, r2
 8000734:	00db      	lsls	r3, r3, #3
 8000736:	440b      	add	r3, r1
 8000738:	3320      	adds	r3, #32
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800073e:	7bfa      	ldrb	r2, [r7, #15]
 8000740:	6879      	ldr	r1, [r7, #4]
 8000742:	4613      	mov	r3, r2
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4413      	add	r3, r2
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	440b      	add	r3, r1
 800074c:	3324      	adds	r3, #36	; 0x24
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000752:	7bfb      	ldrb	r3, [r7, #15]
 8000754:	6879      	ldr	r1, [r7, #4]
 8000756:	1c5a      	adds	r2, r3, #1
 8000758:	4613      	mov	r3, r2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	440b      	add	r3, r1
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	3301      	adds	r3, #1
 800076a:	73fb      	strb	r3, [r7, #15]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	791b      	ldrb	r3, [r3, #4]
 8000770:	7bfa      	ldrb	r2, [r7, #15]
 8000772:	429a      	cmp	r2, r3
 8000774:	d3bb      	bcc.n	80006ee <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000776:	2300      	movs	r3, #0
 8000778:	73fb      	strb	r3, [r7, #15]
 800077a:	e044      	b.n	8000806 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800077c:	7bfa      	ldrb	r2, [r7, #15]
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	4613      	mov	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4413      	add	r3, r2
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	440b      	add	r3, r1
 800078a:	f203 1351 	addw	r3, r3, #337	; 0x151
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000792:	7bfa      	ldrb	r2, [r7, #15]
 8000794:	6879      	ldr	r1, [r7, #4]
 8000796:	4613      	mov	r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	4413      	add	r3, r2
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	440b      	add	r3, r1
 80007a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80007a4:	7bfa      	ldrb	r2, [r7, #15]
 80007a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80007a8:	7bfa      	ldrb	r2, [r7, #15]
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	4613      	mov	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	440b      	add	r3, r1
 80007b6:	f203 1353 	addw	r3, r3, #339	; 0x153
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80007be:	7bfa      	ldrb	r2, [r7, #15]
 80007c0:	6879      	ldr	r1, [r7, #4]
 80007c2:	4613      	mov	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	4413      	add	r3, r2
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	440b      	add	r3, r1
 80007cc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80007d4:	7bfa      	ldrb	r2, [r7, #15]
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	4613      	mov	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	440b      	add	r3, r1
 80007e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80007ea:	7bfa      	ldrb	r2, [r7, #15]
 80007ec:	6879      	ldr	r1, [r7, #4]
 80007ee:	4613      	mov	r3, r2
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	4413      	add	r3, r2
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	440b      	add	r3, r1
 80007f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	3301      	adds	r3, #1
 8000804:	73fb      	strb	r3, [r7, #15]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	791b      	ldrb	r3, [r3, #4]
 800080a:	7bfa      	ldrb	r2, [r7, #15]
 800080c:	429a      	cmp	r2, r3
 800080e:	d3b5      	bcc.n	800077c <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6818      	ldr	r0, [r3, #0]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3304      	adds	r3, #4
 8000818:	cb0e      	ldmia	r3, {r1, r2, r3}
 800081a:	f002 f94c 	bl	8002ab6 <USB_DevInit>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d005      	beq.n	8000830 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2202      	movs	r2, #2
 8000828:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 800082c:	2301      	movs	r3, #1
 800082e:	e00c      	b.n	800084a <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2200      	movs	r2, #0
 8000834:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2201      	movs	r2, #1
 800083a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4618      	mov	r0, r3
 8000844:	f004 fbcb 	bl	8004fde <USB_DevDisconnect>

  return HAL_OK;
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000860:	2b01      	cmp	r3, #1
 8000862:	d101      	bne.n	8000868 <HAL_PCD_Start+0x16>
 8000864:	2302      	movs	r3, #2
 8000866:	e016      	b.n	8000896 <HAL_PCD_Start+0x44>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2201      	movs	r2, #1
 800086c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f002 f8e2 	bl	8002a3e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800087a:	2101      	movs	r1, #1
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f006 f9fc 	bl	8006c7a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4618      	mov	r0, r3
 8000888:	f004 fb9f 	bl	8004fca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2200      	movs	r2, #0
 8000890:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b088      	sub	sp, #32
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f004 fba1 	bl	8004ff2 <USB_ReadInterrupts>
 80008b0:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80008b2:	69bb      	ldr	r3, [r7, #24]
 80008b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d003      	beq.n	80008c4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f000 fb03 	bl	8000ec8 <PCD_EP_ISR_Handler>

    return;
 80008c2:	e119      	b.n	8000af8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d013      	beq.n	80008f6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80008e0:	b292      	uxth	r2, r2
 80008e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f005 fff5 	bl	80068d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80008ec:	2100      	movs	r1, #0
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f000 f905 	bl	8000afe <HAL_PCD_SetAddress>

    return;
 80008f4:	e100      	b.n	8000af8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d00c      	beq.n	800091a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000908:	b29a      	uxth	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000912:	b292      	uxth	r2, r2
 8000914:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000918:	e0ee      	b.n	8000af8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000920:	2b00      	cmp	r3, #0
 8000922:	d00c      	beq.n	800093e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800092c:	b29a      	uxth	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000936:	b292      	uxth	r2, r2
 8000938:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800093c:	e0dc      	b.n	8000af8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000944:	2b00      	cmp	r3, #0
 8000946:	d027      	beq.n	8000998 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000950:	b29a      	uxth	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f022 0204 	bic.w	r2, r2, #4
 800095a:	b292      	uxth	r2, r2
 800095c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000968:	b29a      	uxth	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f022 0208 	bic.w	r2, r2, #8
 8000972:	b292      	uxth	r2, r2
 8000974:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f005 ffe5 	bl	8006948 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000986:	b29a      	uxth	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000990:	b292      	uxth	r2, r2
 8000992:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000996:	e0af      	b.n	8000af8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f000 8083 	beq.w	8000aaa <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80009a4:	2300      	movs	r3, #0
 80009a6:	77fb      	strb	r3, [r7, #31]
 80009a8:	e010      	b.n	80009cc <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	7ffb      	ldrb	r3, [r7, #31]
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	441a      	add	r2, r3
 80009b6:	7ffb      	ldrb	r3, [r7, #31]
 80009b8:	8812      	ldrh	r2, [r2, #0]
 80009ba:	b292      	uxth	r2, r2
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	3320      	adds	r3, #32
 80009c0:	443b      	add	r3, r7
 80009c2:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80009c6:	7ffb      	ldrb	r3, [r7, #31]
 80009c8:	3301      	adds	r3, #1
 80009ca:	77fb      	strb	r3, [r7, #31]
 80009cc:	7ffb      	ldrb	r3, [r7, #31]
 80009ce:	2b07      	cmp	r3, #7
 80009d0:	d9eb      	bls.n	80009aa <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80009da:	b29a      	uxth	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f042 0201 	orr.w	r2, r2, #1
 80009e4:	b292      	uxth	r2, r2
 80009e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f022 0201 	bic.w	r2, r2, #1
 80009fc:	b292      	uxth	r2, r2
 80009fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000a02:	bf00      	nop
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d0f6      	beq.n	8000a04 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a28:	b292      	uxth	r2, r2
 8000a2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	77fb      	strb	r3, [r7, #31]
 8000a32:	e00f      	b.n	8000a54 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000a34:	7ffb      	ldrb	r3, [r7, #31]
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	6812      	ldr	r2, [r2, #0]
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	7ffa      	ldrb	r2, [r7, #31]
 8000a3e:	0092      	lsls	r2, r2, #2
 8000a40:	440a      	add	r2, r1
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	3320      	adds	r3, #32
 8000a46:	443b      	add	r3, r7
 8000a48:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000a4c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000a4e:	7ffb      	ldrb	r3, [r7, #31]
 8000a50:	3301      	adds	r3, #1
 8000a52:	77fb      	strb	r3, [r7, #31]
 8000a54:	7ffb      	ldrb	r3, [r7, #31]
 8000a56:	2b07      	cmp	r3, #7
 8000a58:	d9ec      	bls.n	8000a34 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f042 0208 	orr.w	r2, r2, #8
 8000a6c:	b292      	uxth	r2, r2
 8000a6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a84:	b292      	uxth	r2, r2
 8000a86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f042 0204 	orr.w	r2, r2, #4
 8000a9c:	b292      	uxth	r2, r2
 8000a9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f005 ff36 	bl	8006914 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000aa8:	e026      	b.n	8000af8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d00f      	beq.n	8000ad4 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ac6:	b292      	uxth	r2, r2
 8000ac8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f005 fef4 	bl	80068ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000ad2:	e011      	b.n	8000af8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d00c      	beq.n	8000af8 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000af0:	b292      	uxth	r2, r2
 8000af2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000af6:	bf00      	nop
  }
}
 8000af8:	3720      	adds	r7, #32
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	460b      	mov	r3, r1
 8000b08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d101      	bne.n	8000b18 <HAL_PCD_SetAddress+0x1a>
 8000b14:	2302      	movs	r3, #2
 8000b16:	e012      	b.n	8000b3e <HAL_PCD_SetAddress+0x40>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	78fa      	ldrb	r2, [r7, #3]
 8000b24:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	78fa      	ldrb	r2, [r7, #3]
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f004 fa38 	bl	8004fa4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b084      	sub	sp, #16
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	4608      	mov	r0, r1
 8000b50:	4611      	mov	r1, r2
 8000b52:	461a      	mov	r2, r3
 8000b54:	4603      	mov	r3, r0
 8000b56:	70fb      	strb	r3, [r7, #3]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	803b      	strh	r3, [r7, #0]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000b60:	2300      	movs	r3, #0
 8000b62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000b64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	da0e      	bge.n	8000b8a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000b6c:	78fb      	ldrb	r3, [r7, #3]
 8000b6e:	f003 0207 	and.w	r2, r3, #7
 8000b72:	4613      	mov	r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	3310      	adds	r3, #16
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	4413      	add	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	2201      	movs	r2, #1
 8000b86:	705a      	strb	r2, [r3, #1]
 8000b88:	e00e      	b.n	8000ba8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000b8a:	78fb      	ldrb	r3, [r7, #3]
 8000b8c:	f003 0207 	and.w	r2, r3, #7
 8000b90:	4613      	mov	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	4413      	add	r3, r2
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000ba8:	78fb      	ldrb	r3, [r7, #3]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000bb4:	883a      	ldrh	r2, [r7, #0]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	78ba      	ldrb	r2, [r7, #2]
 8000bbe:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000bc0:	78bb      	ldrb	r3, [r7, #2]
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d102      	bne.n	8000bcc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d101      	bne.n	8000bda <HAL_PCD_EP_Open+0x94>
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	e00e      	b.n	8000bf8 <HAL_PCD_EP_Open+0xb2>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	68f9      	ldr	r1, [r7, #12]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f001 ff81 	bl	8002af0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8000bf6:	7afb      	ldrb	r3, [r7, #11]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	da0e      	bge.n	8000c32 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c14:	78fb      	ldrb	r3, [r7, #3]
 8000c16:	f003 0207 	and.w	r2, r3, #7
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	3310      	adds	r3, #16
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4413      	add	r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	705a      	strb	r2, [r3, #1]
 8000c30:	e00e      	b.n	8000c50 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c32:	78fb      	ldrb	r3, [r7, #3]
 8000c34:	f003 0207 	and.w	r2, r3, #7
 8000c38:	4613      	mov	r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	4413      	add	r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d101      	bne.n	8000c6a <HAL_PCD_EP_Close+0x6a>
 8000c66:	2302      	movs	r3, #2
 8000c68:	e00e      	b.n	8000c88 <HAL_PCD_EP_Close+0x88>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	68f9      	ldr	r1, [r7, #12]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f002 faf9 	bl	8003270 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	607a      	str	r2, [r7, #4]
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000ca0:	7afb      	ldrb	r3, [r7, #11]
 8000ca2:	f003 0207 	and.w	r2, r3, #7
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	4413      	add	r3, r2
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	683a      	ldr	r2, [r7, #0]
 8000cc2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000cd0:	7afb      	ldrb	r3, [r7, #11]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	6979      	ldr	r1, [r7, #20]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f002 fcb0 	bl	8003648 <USB_EPStartXfer>

  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	460b      	mov	r3, r1
 8000d00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d02:	7afb      	ldrb	r3, [r7, #11]
 8000d04:	f003 0207 	and.w	r2, r3, #7
 8000d08:	4613      	mov	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	3310      	adds	r3, #16
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	4413      	add	r3, r2
 8000d16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	683a      	ldr	r2, [r7, #0]
 8000d22:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	2201      	movs	r2, #1
 8000d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	683a      	ldr	r2, [r7, #0]
 8000d30:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	2200      	movs	r2, #0
 8000d36:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d3e:	7afb      	ldrb	r3, [r7, #11]
 8000d40:	f003 0307 	and.w	r3, r3, #7
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	6979      	ldr	r1, [r7, #20]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f002 fc79 	bl	8003648 <USB_EPStartXfer>

  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	7912      	ldrb	r2, [r2, #4]
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d901      	bls.n	8000d7e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e04c      	b.n	8000e18 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000d7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	da0e      	bge.n	8000da4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000d86:	78fb      	ldrb	r3, [r7, #3]
 8000d88:	f003 0207 	and.w	r2, r3, #7
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	3310      	adds	r3, #16
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	705a      	strb	r2, [r3, #1]
 8000da2:	e00c      	b.n	8000dbe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000da4:	78fa      	ldrb	r2, [r7, #3]
 8000da6:	4613      	mov	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000dc4:	78fb      	ldrb	r3, [r7, #3]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d101      	bne.n	8000dde <HAL_PCD_EP_SetStall+0x7e>
 8000dda:	2302      	movs	r3, #2
 8000ddc:	e01c      	b.n	8000e18 <HAL_PCD_EP_SetStall+0xb8>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2201      	movs	r2, #1
 8000de2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68f9      	ldr	r1, [r7, #12]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 ffdc 	bl	8004daa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000df2:	78fb      	ldrb	r3, [r7, #3]
 8000df4:	f003 0307 	and.w	r3, r3, #7
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d108      	bne.n	8000e0e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8000e06:	4619      	mov	r1, r3
 8000e08:	4610      	mov	r0, r2
 8000e0a:	f004 f901 	bl	8005010 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000e2c:	78fb      	ldrb	r3, [r7, #3]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	7912      	ldrb	r2, [r2, #4]
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d901      	bls.n	8000e3e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e040      	b.n	8000ec0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000e3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	da0e      	bge.n	8000e64 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e46:	78fb      	ldrb	r3, [r7, #3]
 8000e48:	f003 0207 	and.w	r2, r3, #7
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4413      	add	r3, r2
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	3310      	adds	r3, #16
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2201      	movs	r2, #1
 8000e60:	705a      	strb	r2, [r3, #1]
 8000e62:	e00e      	b.n	8000e82 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000e64:	78fb      	ldrb	r3, [r7, #3]
 8000e66:	f003 0207 	and.w	r2, r3, #7
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2200      	movs	r2, #0
 8000e86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e88:	78fb      	ldrb	r3, [r7, #3]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d101      	bne.n	8000ea2 <HAL_PCD_EP_ClrStall+0x82>
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	e00e      	b.n	8000ec0 <HAL_PCD_EP_ClrStall+0xa0>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	68f9      	ldr	r1, [r7, #12]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f003 ffca 	bl	8004e4a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b096      	sub	sp, #88	; 0x58
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000ed0:	e3bc      	b.n	800164c <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000eda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000ede:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	f003 030f 	and.w	r3, r3, #15
 8000ee8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8000eec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f040 8176 	bne.w	80011e2 <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000ef6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d14f      	bne.n	8000fa2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f12:	81fb      	strh	r3, [r7, #14]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	89fb      	ldrh	r3, [r7, #14]
 8000f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3310      	adds	r3, #16
 8000f2a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	461a      	mov	r2, r3
 8000f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	4413      	add	r3, r2
 8000f40:	3302      	adds	r3, #2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	6812      	ldr	r2, [r2, #0]
 8000f48:	4413      	add	r3, r2
 8000f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f56:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8000f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f5a:	695a      	ldr	r2, [r3, #20]
 8000f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f5e:	69db      	ldr	r3, [r3, #28]
 8000f60:	441a      	add	r2, r3
 8000f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f64:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000f66:	2100      	movs	r1, #0
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f005 fc8c 	bl	8006886 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7b5b      	ldrb	r3, [r3, #13]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 8369 	beq.w	800164c <PCD_EP_ISR_Handler+0x784>
 8000f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f040 8364 	bne.w	800164c <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	7b5b      	ldrb	r3, [r3, #13]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	b292      	uxth	r2, r2
 8000f96:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	735a      	strb	r2, [r3, #13]
 8000fa0:	e354      	b.n	800164c <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000fa8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000fb4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d034      	beq.n	800102a <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	461a      	mov	r2, r3
 8000fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	3306      	adds	r3, #6
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	6812      	ldr	r2, [r2, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fea:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6818      	ldr	r0, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8000ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ff8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8000ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ffc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	f004 f856 	bl	80050b0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	b29a      	uxth	r2, r3
 800100c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001010:	4013      	ands	r3, r2
 8001012:	823b      	strh	r3, [r7, #16]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	8a3a      	ldrh	r2, [r7, #16]
 800101a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800101e:	b292      	uxth	r2, r2
 8001020:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f005 fc02 	bl	800682c <HAL_PCD_SetupStageCallback>
 8001028:	e310      	b.n	800164c <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800102a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800102e:	2b00      	cmp	r3, #0
 8001030:	f280 830c 	bge.w	800164c <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	b29a      	uxth	r2, r3
 800103c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001040:	4013      	ands	r3, r2
 8001042:	83fb      	strh	r3, [r7, #30]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	8bfa      	ldrh	r2, [r7, #30]
 800104a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800104e:	b292      	uxth	r2, r2
 8001050:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800105a:	b29b      	uxth	r3, r3
 800105c:	461a      	mov	r2, r3
 800105e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	4413      	add	r3, r2
 8001066:	3306      	adds	r3, #6
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	6812      	ldr	r2, [r2, #0]
 800106e:	4413      	add	r3, r2
 8001070:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800107a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800107c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800107e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d019      	beq.n	80010ba <PCD_EP_ISR_Handler+0x1f2>
 8001086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d015      	beq.n	80010ba <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001094:	6959      	ldr	r1, [r3, #20]
 8001096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001098:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800109a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800109c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800109e:	b29b      	uxth	r3, r3
 80010a0:	f004 f806 	bl	80050b0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80010a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010a6:	695a      	ldr	r2, [r3, #20]
 80010a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010aa:	69db      	ldr	r3, [r3, #28]
 80010ac:	441a      	add	r2, r3
 80010ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010b0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80010b2:	2100      	movs	r1, #0
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f005 fbcb 	bl	8006850 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80010c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80010c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f040 82bd 	bne.w	800164c <PCD_EP_ISR_Handler+0x784>
 80010d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80010d6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80010da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80010de:	f000 82b5 	beq.w	800164c <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	61bb      	str	r3, [r7, #24]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	461a      	mov	r2, r3
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	4413      	add	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	b29b      	uxth	r3, r3
 8001108:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800110c:	b29a      	uxth	r2, r3
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	801a      	strh	r2, [r3, #0]
 8001112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	2b3e      	cmp	r3, #62	; 0x3e
 8001118:	d91d      	bls.n	8001156 <PCD_EP_ISR_Handler+0x28e>
 800111a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	095b      	lsrs	r3, r3, #5
 8001120:	647b      	str	r3, [r7, #68]	; 0x44
 8001122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	f003 031f 	and.w	r3, r3, #31
 800112a:	2b00      	cmp	r3, #0
 800112c:	d102      	bne.n	8001134 <PCD_EP_ISR_Handler+0x26c>
 800112e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001130:	3b01      	subs	r3, #1
 8001132:	647b      	str	r3, [r7, #68]	; 0x44
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	b29a      	uxth	r2, r3
 800113a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800113c:	b29b      	uxth	r3, r3
 800113e:	029b      	lsls	r3, r3, #10
 8001140:	b29b      	uxth	r3, r3
 8001142:	4313      	orrs	r3, r2
 8001144:	b29b      	uxth	r3, r3
 8001146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800114a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800114e:	b29a      	uxth	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	801a      	strh	r2, [r3, #0]
 8001154:	e026      	b.n	80011a4 <PCD_EP_ISR_Handler+0x2dc>
 8001156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10a      	bne.n	8001174 <PCD_EP_ISR_Handler+0x2ac>
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	b29b      	uxth	r3, r3
 8001164:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001168:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800116c:	b29a      	uxth	r2, r3
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	801a      	strh	r2, [r3, #0]
 8001172:	e017      	b.n	80011a4 <PCD_EP_ISR_Handler+0x2dc>
 8001174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	085b      	lsrs	r3, r3, #1
 800117a:	647b      	str	r3, [r7, #68]	; 0x44
 800117c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	2b00      	cmp	r3, #0
 8001186:	d002      	beq.n	800118e <PCD_EP_ISR_Handler+0x2c6>
 8001188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800118a:	3301      	adds	r3, #1
 800118c:	647b      	str	r3, [r7, #68]	; 0x44
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	b29a      	uxth	r2, r3
 8001194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001196:	b29b      	uxth	r3, r3
 8001198:	029b      	lsls	r3, r3, #10
 800119a:	b29b      	uxth	r3, r3
 800119c:	4313      	orrs	r3, r2
 800119e:	b29a      	uxth	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011b4:	827b      	strh	r3, [r7, #18]
 80011b6:	8a7b      	ldrh	r3, [r7, #18]
 80011b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80011bc:	827b      	strh	r3, [r7, #18]
 80011be:	8a7b      	ldrh	r3, [r7, #18]
 80011c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80011c4:	827b      	strh	r3, [r7, #18]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	8a7b      	ldrh	r3, [r7, #18]
 80011cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80011d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80011d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011dc:	b29b      	uxth	r3, r3
 80011de:	8013      	strh	r3, [r2, #0]
 80011e0:	e234      	b.n	800164c <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80011f6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f280 80fc 	bge.w	80013f8 <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	b29a      	uxth	r2, r3
 8001212:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001216:	4013      	ands	r3, r2
 8001218:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800122e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001232:	b292      	uxth	r2, r2
 8001234:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001236:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800124c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800124e:	7b1b      	ldrb	r3, [r3, #12]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d125      	bne.n	80012a0 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800125c:	b29b      	uxth	r3, r3
 800125e:	461a      	mov	r2, r3
 8001260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4413      	add	r3, r2
 8001268:	3306      	adds	r3, #6
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	6812      	ldr	r2, [r2, #0]
 8001270:	4413      	add	r3, r2
 8001272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800127c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001280:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 8092 	beq.w	80013ae <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001290:	6959      	ldr	r1, [r3, #20]
 8001292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001294:	88da      	ldrh	r2, [r3, #6]
 8001296:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800129a:	f003 ff09 	bl	80050b0 <USB_ReadPMA>
 800129e:	e086      	b.n	80013ae <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80012a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012a2:	78db      	ldrb	r3, [r3, #3]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d10a      	bne.n	80012be <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80012a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80012ac:	461a      	mov	r2, r3
 80012ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 f9d9 	bl	8001668 <HAL_PCD_EP_DB_Receive>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80012bc:	e077      	b.n	80013ae <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80012d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012d8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	441a      	add	r2, r3
 80012ea:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80012ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80012f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80012f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80012fe:	b29b      	uxth	r3, r3
 8001300:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	b29b      	uxth	r3, r3
 8001314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d024      	beq.n	8001366 <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001324:	b29b      	uxth	r3, r3
 8001326:	461a      	mov	r2, r3
 8001328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4413      	add	r3, r2
 8001330:	3302      	adds	r3, #2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	4413      	add	r3, r2
 800133a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001344:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001348:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800134c:	2b00      	cmp	r3, #0
 800134e:	d02e      	beq.n	80013ae <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001356:	6959      	ldr	r1, [r3, #20]
 8001358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800135a:	891a      	ldrh	r2, [r3, #8]
 800135c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001360:	f003 fea6 	bl	80050b0 <USB_ReadPMA>
 8001364:	e023      	b.n	80013ae <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800136e:	b29b      	uxth	r3, r3
 8001370:	461a      	mov	r2, r3
 8001372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	4413      	add	r3, r2
 800137a:	3306      	adds	r3, #6
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	6812      	ldr	r2, [r2, #0]
 8001382:	4413      	add	r3, r2
 8001384:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800138e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001392:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001396:	2b00      	cmp	r3, #0
 8001398:	d009      	beq.n	80013ae <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013a0:	6959      	ldr	r1, [r3, #20]
 80013a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013a4:	895a      	ldrh	r2, [r3, #10]
 80013a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80013aa:	f003 fe81 	bl	80050b0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80013ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013b0:	69da      	ldr	r2, [r3, #28]
 80013b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80013b6:	441a      	add	r2, r3
 80013b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80013bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013be:	695a      	ldr	r2, [r3, #20]
 80013c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80013c4:	441a      	add	r2, r3
 80013c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013c8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80013ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d005      	beq.n	80013de <PCD_EP_ISR_Handler+0x516>
 80013d2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80013d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d206      	bcs.n	80013ec <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80013de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	4619      	mov	r1, r3
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f005 fa33 	bl	8006850 <HAL_PCD_DataOutStageCallback>
 80013ea:	e005      	b.n	80013f8 <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 f928 	bl	8003648 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80013f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80013fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 8123 	beq.w	800164c <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 8001406:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	3310      	adds	r3, #16
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	4413      	add	r3, r2
 8001418:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	881b      	ldrh	r3, [r3, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001434:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	441a      	add	r2, r3
 8001446:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800144a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800144e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001452:	b29b      	uxth	r3, r3
 8001454:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001458:	78db      	ldrb	r3, [r3, #3]
 800145a:	2b01      	cmp	r3, #1
 800145c:	f040 80a2 	bne.w	80015a4 <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 8001460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001462:	2200      	movs	r2, #0
 8001464:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001468:	7b1b      	ldrb	r3, [r3, #12]
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 8093 	beq.w	8001596 <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001470:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001478:	2b00      	cmp	r3, #0
 800147a:	d046      	beq.n	800150a <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800147c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800147e:	785b      	ldrb	r3, [r3, #1]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d126      	bne.n	80014d2 <PCD_EP_ISR_Handler+0x60a>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001492:	b29b      	uxth	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	4413      	add	r3, r2
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
 800149c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	011a      	lsls	r2, r3, #4
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	4413      	add	r3, r2
 80014a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80014aa:	623b      	str	r3, [r7, #32]
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	801a      	strh	r2, [r3, #0]
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	6a3b      	ldr	r3, [r7, #32]
 80014ce:	801a      	strh	r2, [r3, #0]
 80014d0:	e061      	b.n	8001596 <PCD_EP_ISR_Handler+0x6ce>
 80014d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014d4:	785b      	ldrb	r3, [r3, #1]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d15d      	bne.n	8001596 <PCD_EP_ISR_Handler+0x6ce>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ee:	4413      	add	r3, r2
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	011a      	lsls	r2, r3, #4
 80014f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fa:	4413      	add	r3, r2
 80014fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001500:	62bb      	str	r3, [r7, #40]	; 0x28
 8001502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001504:	2200      	movs	r2, #0
 8001506:	801a      	strh	r2, [r3, #0]
 8001508:	e045      	b.n	8001596 <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001512:	785b      	ldrb	r3, [r3, #1]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d126      	bne.n	8001566 <PCD_EP_ISR_Handler+0x69e>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	637b      	str	r3, [r7, #52]	; 0x34
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001526:	b29b      	uxth	r3, r3
 8001528:	461a      	mov	r2, r3
 800152a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800152c:	4413      	add	r3, r2
 800152e:	637b      	str	r3, [r7, #52]	; 0x34
 8001530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	011a      	lsls	r2, r3, #4
 8001536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001538:	4413      	add	r3, r2
 800153a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800153e:	633b      	str	r3, [r7, #48]	; 0x30
 8001540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	b29b      	uxth	r3, r3
 8001546:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800154a:	b29a      	uxth	r2, r3
 800154c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800154e:	801a      	strh	r2, [r3, #0]
 8001550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	b29b      	uxth	r3, r3
 8001556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800155a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800155e:	b29a      	uxth	r2, r3
 8001560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001562:	801a      	strh	r2, [r3, #0]
 8001564:	e017      	b.n	8001596 <PCD_EP_ISR_Handler+0x6ce>
 8001566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001568:	785b      	ldrb	r3, [r3, #1]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d113      	bne.n	8001596 <PCD_EP_ISR_Handler+0x6ce>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001576:	b29b      	uxth	r3, r3
 8001578:	461a      	mov	r2, r3
 800157a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800157c:	4413      	add	r3, r2
 800157e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	011a      	lsls	r2, r3, #4
 8001586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001588:	4413      	add	r3, r2
 800158a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800158e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001592:	2200      	movs	r2, #0
 8001594:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	4619      	mov	r1, r3
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f005 f972 	bl	8006886 <HAL_PCD_DataInStageCallback>
 80015a2:	e053      	b.n	800164c <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80015a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80015a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d146      	bne.n	800163e <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	461a      	mov	r2, r3
 80015bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4413      	add	r3, r2
 80015c4:	3302      	adds	r3, #2
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	4413      	add	r3, r2
 80015ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80015dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015de:	699a      	ldr	r2, [r3, #24]
 80015e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d907      	bls.n	80015f8 <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 80015e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015ea:	699a      	ldr	r2, [r3, #24]
 80015ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80015f0:	1ad2      	subs	r2, r2, r3
 80015f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015f4:	619a      	str	r2, [r3, #24]
 80015f6:	e002      	b.n	80015fe <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 80015f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80015fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d106      	bne.n	8001614 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	4619      	mov	r1, r3
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f005 f93a 	bl	8006886 <HAL_PCD_DataInStageCallback>
 8001612:	e01b      	b.n	800164c <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001616:	695a      	ldr	r2, [r3, #20]
 8001618:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800161c:	441a      	add	r2, r3
 800161e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001620:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001624:	69da      	ldr	r2, [r3, #28]
 8001626:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800162a:	441a      	add	r2, r3
 800162c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800162e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001636:	4618      	mov	r0, r3
 8001638:	f002 f806 	bl	8003648 <USB_EPStartXfer>
 800163c:	e006      	b.n	800164c <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800163e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001642:	461a      	mov	r2, r3
 8001644:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 f91b 	bl	8001882 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001654:	b29b      	uxth	r3, r3
 8001656:	b21b      	sxth	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	f6ff ac3a 	blt.w	8000ed2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3758      	adds	r7, #88	; 0x58
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	4613      	mov	r3, r2
 8001674:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d07e      	beq.n	800177e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001688:	b29b      	uxth	r3, r3
 800168a:	461a      	mov	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	4413      	add	r3, r2
 8001694:	3302      	adds	r3, #2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	4413      	add	r3, r2
 800169e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016a8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	699a      	ldr	r2, [r3, #24]
 80016ae:	8b7b      	ldrh	r3, [r7, #26]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d306      	bcc.n	80016c2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	699a      	ldr	r2, [r3, #24]
 80016b8:	8b7b      	ldrh	r3, [r7, #26]
 80016ba:	1ad2      	subs	r2, r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	619a      	str	r2, [r3, #24]
 80016c0:	e002      	b.n	80016c8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d123      	bne.n	8001718 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016ea:	833b      	strh	r3, [r7, #24]
 80016ec:	8b3b      	ldrh	r3, [r7, #24]
 80016ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80016f2:	833b      	strh	r3, [r7, #24]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	441a      	add	r2, r3
 8001702:	8b3b      	ldrh	r3, [r7, #24]
 8001704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800170c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001714:	b29b      	uxth	r3, r3
 8001716:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800171e:	2b00      	cmp	r3, #0
 8001720:	d01f      	beq.n	8001762 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	b29b      	uxth	r3, r3
 8001734:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800173c:	82fb      	strh	r3, [r7, #22]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	441a      	add	r2, r3
 800174c:	8afb      	ldrh	r3, [r7, #22]
 800174e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800175a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800175e:	b29b      	uxth	r3, r3
 8001760:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001762:	8b7b      	ldrh	r3, [r7, #26]
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 8087 	beq.w	8001878 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6818      	ldr	r0, [r3, #0]
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	6959      	ldr	r1, [r3, #20]
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	891a      	ldrh	r2, [r3, #8]
 8001776:	8b7b      	ldrh	r3, [r7, #26]
 8001778:	f003 fc9a 	bl	80050b0 <USB_ReadPMA>
 800177c:	e07c      	b.n	8001878 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001786:	b29b      	uxth	r3, r3
 8001788:	461a      	mov	r2, r3
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	4413      	add	r3, r2
 8001792:	3306      	adds	r3, #6
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	4413      	add	r3, r2
 800179c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017a6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	699a      	ldr	r2, [r3, #24]
 80017ac:	8b7b      	ldrh	r3, [r7, #26]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d306      	bcc.n	80017c0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	699a      	ldr	r2, [r3, #24]
 80017b6:	8b7b      	ldrh	r3, [r7, #26]
 80017b8:	1ad2      	subs	r2, r2, r3
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	619a      	str	r2, [r3, #24]
 80017be:	e002      	b.n	80017c6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d123      	bne.n	8001816 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017e8:	83fb      	strh	r3, [r7, #30]
 80017ea:	8bfb      	ldrh	r3, [r7, #30]
 80017ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80017f0:	83fb      	strh	r3, [r7, #30]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	441a      	add	r2, r3
 8001800:	8bfb      	ldrh	r3, [r7, #30]
 8001802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800180a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800180e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001812:	b29b      	uxth	r3, r3
 8001814:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181c:	2b00      	cmp	r3, #0
 800181e:	d11f      	bne.n	8001860 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	b29b      	uxth	r3, r3
 8001832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800183a:	83bb      	strh	r3, [r7, #28]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	441a      	add	r2, r3
 800184a:	8bbb      	ldrh	r3, [r7, #28]
 800184c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001858:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800185c:	b29b      	uxth	r3, r3
 800185e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001860:	8b7b      	ldrh	r3, [r7, #26]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d008      	beq.n	8001878 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	6959      	ldr	r1, [r3, #20]
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	895a      	ldrh	r2, [r3, #10]
 8001872:	8b7b      	ldrh	r3, [r7, #26]
 8001874:	f003 fc1c 	bl	80050b0 <USB_ReadPMA>
    }
  }

  return count;
 8001878:	8b7b      	ldrh	r3, [r7, #26]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3720      	adds	r7, #32
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b0a4      	sub	sp, #144	; 0x90
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	4613      	mov	r3, r2
 800188e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001890:	88fb      	ldrh	r3, [r7, #6]
 8001892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 81dd 	beq.w	8001c56 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	4413      	add	r3, r2
 80018b0:	3302      	adds	r3, #2
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	4413      	add	r3, r2
 80018ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018c4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	699a      	ldr	r2, [r3, #24]
 80018cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d907      	bls.n	80018e4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	699a      	ldr	r2, [r3, #24]
 80018d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80018dc:	1ad2      	subs	r2, r2, r3
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	619a      	str	r2, [r3, #24]
 80018e2:	e002      	b.n	80018ea <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2200      	movs	r2, #0
 80018e8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 80b9 	bne.w	8001a66 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	785b      	ldrb	r3, [r3, #1]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d126      	bne.n	800194a <HAL_PCD_EP_DB_Transmit+0xc8>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800190a:	b29b      	uxth	r3, r3
 800190c:	461a      	mov	r2, r3
 800190e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001910:	4413      	add	r3, r2
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	011a      	lsls	r2, r3, #4
 800191a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191c:	4413      	add	r3, r2
 800191e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
 8001924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	b29b      	uxth	r3, r3
 800192a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800192e:	b29a      	uxth	r2, r3
 8001930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001932:	801a      	strh	r2, [r3, #0]
 8001934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	b29b      	uxth	r3, r3
 800193a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800193e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001942:	b29a      	uxth	r2, r3
 8001944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001946:	801a      	strh	r2, [r3, #0]
 8001948:	e01a      	b.n	8001980 <HAL_PCD_EP_DB_Transmit+0xfe>
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	785b      	ldrb	r3, [r3, #1]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d116      	bne.n	8001980 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	637b      	str	r3, [r7, #52]	; 0x34
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001960:	b29b      	uxth	r3, r3
 8001962:	461a      	mov	r2, r3
 8001964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001966:	4413      	add	r3, r2
 8001968:	637b      	str	r3, [r7, #52]	; 0x34
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	011a      	lsls	r2, r3, #4
 8001970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001972:	4413      	add	r3, r2
 8001974:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001978:	633b      	str	r3, [r7, #48]	; 0x30
 800197a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800197c:	2200      	movs	r2, #0
 800197e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	785b      	ldrb	r3, [r3, #1]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d126      	bne.n	80019dc <HAL_PCD_EP_DB_Transmit+0x15a>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800199c:	b29b      	uxth	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	4413      	add	r3, r2
 80019a4:	61fb      	str	r3, [r7, #28]
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	011a      	lsls	r2, r3, #4
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	4413      	add	r3, r2
 80019b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	801a      	strh	r2, [r3, #0]
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	801a      	strh	r2, [r3, #0]
 80019da:	e017      	b.n	8001a0c <HAL_PCD_EP_DB_Transmit+0x18a>
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	785b      	ldrb	r3, [r3, #1]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d113      	bne.n	8001a0c <HAL_PCD_EP_DB_Transmit+0x18a>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	4413      	add	r3, r2
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	011a      	lsls	r2, r3, #4
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	4413      	add	r3, r2
 8001a00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a04:	623b      	str	r3, [r7, #32]
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	4619      	mov	r1, r3
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f004 ff37 	bl	8006886 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 82fc 	beq.w	800201c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a3e:	82fb      	strh	r3, [r7, #22]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	441a      	add	r2, r3
 8001a4e:	8afb      	ldrh	r3, [r7, #22]
 8001a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	8013      	strh	r3, [r2, #0]
 8001a64:	e2da      	b.n	800201c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d021      	beq.n	8001ab4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a8a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	441a      	add	r2, r3
 8001a9c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001aa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	f040 82ae 	bne.w	800201c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	695a      	ldr	r2, [r3, #20]
 8001ac4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001ac8:	441a      	add	r2, r3
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	69da      	ldr	r2, [r3, #28]
 8001ad2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001ad6:	441a      	add	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	6a1a      	ldr	r2, [r3, #32]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d30b      	bcc.n	8001b00 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	6a1a      	ldr	r2, [r3, #32]
 8001af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001af8:	1ad2      	subs	r2, r2, r3
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	621a      	str	r2, [r3, #32]
 8001afe:	e017      	b.n	8001b30 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d108      	bne.n	8001b1a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8001b08:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001b0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b18:	e00a      	b.n	8001b30 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	785b      	ldrb	r3, [r3, #1]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d165      	bne.n	8001c04 <HAL_PCD_EP_DB_Transmit+0x382>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b4c:	4413      	add	r3, r2
 8001b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	011a      	lsls	r2, r3, #4
 8001b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b58:	4413      	add	r3, r2
 8001b5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001b5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b6e:	801a      	strh	r2, [r3, #0]
 8001b70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b74:	2b3e      	cmp	r3, #62	; 0x3e
 8001b76:	d91d      	bls.n	8001bb4 <HAL_PCD_EP_DB_Transmit+0x332>
 8001b78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b7c:	095b      	lsrs	r3, r3, #5
 8001b7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <HAL_PCD_EP_DB_Transmit+0x310>
 8001b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	029b      	lsls	r3, r3, #10
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bb0:	801a      	strh	r2, [r3, #0]
 8001bb2:	e044      	b.n	8001c3e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10a      	bne.n	8001bd2 <HAL_PCD_EP_DB_Transmit+0x350>
 8001bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bce:	801a      	strh	r2, [r3, #0]
 8001bd0:	e035      	b.n	8001c3e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bd6:	085b      	lsrs	r3, r3, #1
 8001bd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <HAL_PCD_EP_DB_Transmit+0x36a>
 8001be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001be8:	3301      	adds	r3, #1
 8001bea:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	029b      	lsls	r3, r3, #10
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c00:	801a      	strh	r2, [r3, #0]
 8001c02:	e01c      	b.n	8001c3e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	785b      	ldrb	r3, [r3, #1]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d118      	bne.n	8001c3e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	647b      	str	r3, [r7, #68]	; 0x44
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c20:	4413      	add	r3, r2
 8001c22:	647b      	str	r3, [r7, #68]	; 0x44
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	011a      	lsls	r2, r3, #4
 8001c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001c32:	643b      	str	r3, [r7, #64]	; 0x40
 8001c34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c3c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	6959      	ldr	r1, [r3, #20]
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	891a      	ldrh	r2, [r3, #8]
 8001c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	f003 f9e9 	bl	8005026 <USB_WritePMA>
 8001c54:	e1e2      	b.n	800201c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	461a      	mov	r2, r3
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4413      	add	r3, r2
 8001c6a:	3306      	adds	r3, #6
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c7e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	699a      	ldr	r2, [r3, #24]
 8001c86:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d307      	bcc.n	8001c9e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	699a      	ldr	r2, [r3, #24]
 8001c92:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001c96:	1ad2      	subs	r2, r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	619a      	str	r2, [r3, #24]
 8001c9c:	e002      	b.n	8001ca4 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f040 80c0 	bne.w	8001e2e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	785b      	ldrb	r3, [r3, #1]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d126      	bne.n	8001d04 <HAL_PCD_EP_DB_Transmit+0x482>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cca:	4413      	add	r3, r2
 8001ccc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	011a      	lsls	r2, r3, #4
 8001cd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001cdc:	67bb      	str	r3, [r7, #120]	; 0x78
 8001cde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cec:	801a      	strh	r2, [r3, #0]
 8001cee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d00:	801a      	strh	r2, [r3, #0]
 8001d02:	e01a      	b.n	8001d3a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	785b      	ldrb	r3, [r3, #1]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d116      	bne.n	8001d3a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	667b      	str	r3, [r7, #100]	; 0x64
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d20:	4413      	add	r3, r2
 8001d22:	667b      	str	r3, [r7, #100]	; 0x64
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	011a      	lsls	r2, r3, #4
 8001d2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d32:	663b      	str	r3, [r7, #96]	; 0x60
 8001d34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d36:	2200      	movs	r2, #0
 8001d38:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	677b      	str	r3, [r7, #116]	; 0x74
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	785b      	ldrb	r3, [r3, #1]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d12b      	bne.n	8001da0 <HAL_PCD_EP_DB_Transmit+0x51e>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d5c:	4413      	add	r3, r2
 8001d5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	011a      	lsls	r2, r3, #4
 8001d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d68:	4413      	add	r3, r2
 8001d6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d84:	801a      	strh	r2, [r3, #0]
 8001d86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d9c:	801a      	strh	r2, [r3, #0]
 8001d9e:	e017      	b.n	8001dd0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	785b      	ldrb	r3, [r3, #1]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d113      	bne.n	8001dd0 <HAL_PCD_EP_DB_Transmit+0x54e>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001db6:	4413      	add	r3, r2
 8001db8:	677b      	str	r3, [r7, #116]	; 0x74
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	011a      	lsls	r2, r3, #4
 8001dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001dc8:	673b      	str	r3, [r7, #112]	; 0x70
 8001dca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dcc:	2200      	movs	r2, #0
 8001dce:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f004 fd55 	bl	8006886 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f040 811a 	bne.w	800201c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e02:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	441a      	add	r2, r3
 8001e14:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	8013      	strh	r3, [r2, #0]
 8001e2c:	e0f6      	b.n	800201c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d121      	bne.n	8001e7c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e52:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	441a      	add	r2, r3
 8001e64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	f040 80ca 	bne.w	800201c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	695a      	ldr	r2, [r3, #20]
 8001e8c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001e90:	441a      	add	r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	69da      	ldr	r2, [r3, #28]
 8001e9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001e9e:	441a      	add	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	6a1a      	ldr	r2, [r3, #32]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d30b      	bcc.n	8001ec8 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	6a1a      	ldr	r2, [r3, #32]
 8001ebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ec0:	1ad2      	subs	r2, r2, r3
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	621a      	str	r2, [r3, #32]
 8001ec6:	e017      	b.n	8001ef8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d108      	bne.n	8001ee2 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8001ed0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001ed4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ee0:	e00a      	b.n	8001ef8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2200      	movs	r2, #0
 8001eee:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	657b      	str	r3, [r7, #84]	; 0x54
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	785b      	ldrb	r3, [r3, #1]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d165      	bne.n	8001fd2 <HAL_PCD_EP_DB_Transmit+0x750>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	461a      	mov	r2, r3
 8001f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f1a:	4413      	add	r3, r2
 8001f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	011a      	lsls	r2, r3, #4
 8001f24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f26:	4413      	add	r3, r2
 8001f28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f3c:	801a      	strh	r2, [r3, #0]
 8001f3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f42:	2b3e      	cmp	r3, #62	; 0x3e
 8001f44:	d91d      	bls.n	8001f82 <HAL_PCD_EP_DB_Transmit+0x700>
 8001f46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d102      	bne.n	8001f60 <HAL_PCD_EP_DB_Transmit+0x6de>
 8001f5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	029b      	lsls	r3, r3, #10
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f7e:	801a      	strh	r2, [r3, #0]
 8001f80:	e041      	b.n	8002006 <HAL_PCD_EP_DB_Transmit+0x784>
 8001f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10a      	bne.n	8001fa0 <HAL_PCD_EP_DB_Transmit+0x71e>
 8001f8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f9c:	801a      	strh	r2, [r3, #0]
 8001f9e:	e032      	b.n	8002006 <HAL_PCD_EP_DB_Transmit+0x784>
 8001fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fa4:	085b      	lsrs	r3, r3, #1
 8001fa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8001fa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d002      	beq.n	8001fba <HAL_PCD_EP_DB_Transmit+0x738>
 8001fb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8001fba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	029b      	lsls	r3, r3, #10
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fce:	801a      	strh	r2, [r3, #0]
 8001fd0:	e019      	b.n	8002006 <HAL_PCD_EP_DB_Transmit+0x784>
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	785b      	ldrb	r3, [r3, #1]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d115      	bne.n	8002006 <HAL_PCD_EP_DB_Transmit+0x784>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe8:	4413      	add	r3, r2
 8001fea:	657b      	str	r3, [r7, #84]	; 0x54
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	011a      	lsls	r2, r3, #4
 8001ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ffa:	653b      	str	r3, [r7, #80]	; 0x50
 8001ffc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002000:	b29a      	uxth	r2, r3
 8002002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002004:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6818      	ldr	r0, [r3, #0]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	6959      	ldr	r1, [r3, #20]
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	895a      	ldrh	r2, [r3, #10]
 8002012:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002016:	b29b      	uxth	r3, r3
 8002018:	f003 f805 	bl	8005026 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	b29b      	uxth	r3, r3
 800202e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002032:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002036:	82bb      	strh	r3, [r7, #20]
 8002038:	8abb      	ldrh	r3, [r7, #20]
 800203a:	f083 0310 	eor.w	r3, r3, #16
 800203e:	82bb      	strh	r3, [r7, #20]
 8002040:	8abb      	ldrh	r3, [r7, #20]
 8002042:	f083 0320 	eor.w	r3, r3, #32
 8002046:	82bb      	strh	r3, [r7, #20]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	441a      	add	r2, r3
 8002056:	8abb      	ldrh	r3, [r7, #20]
 8002058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800205c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002068:	b29b      	uxth	r3, r3
 800206a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3790      	adds	r7, #144	; 0x90
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002076:	b480      	push	{r7}
 8002078:	b087      	sub	sp, #28
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	817b      	strh	r3, [r7, #10]
 8002084:	4613      	mov	r3, r2
 8002086:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002088:	897b      	ldrh	r3, [r7, #10]
 800208a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208e:	b29b      	uxth	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00b      	beq.n	80020ac <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002094:	897b      	ldrh	r3, [r7, #10]
 8002096:	f003 0207 	and.w	r2, r3, #7
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	3310      	adds	r3, #16
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4413      	add	r3, r2
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	e009      	b.n	80020c0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020ac:	897a      	ldrh	r2, [r7, #10]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4413      	add	r3, r2
 80020be:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80020c0:	893b      	ldrh	r3, [r7, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d107      	bne.n	80020d6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2200      	movs	r2, #0
 80020ca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	80da      	strh	r2, [r3, #6]
 80020d4:	e00b      	b.n	80020ee <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2201      	movs	r2, #1
 80020da:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	b29a      	uxth	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	0c1b      	lsrs	r3, r3, #16
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	371c      	adds	r7, #28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
	...

080020fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e272      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 8087 	beq.w	800222a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800211c:	4b92      	ldr	r3, [pc, #584]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 030c 	and.w	r3, r3, #12
 8002124:	2b04      	cmp	r3, #4
 8002126:	d00c      	beq.n	8002142 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002128:	4b8f      	ldr	r3, [pc, #572]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	2b08      	cmp	r3, #8
 8002132:	d112      	bne.n	800215a <HAL_RCC_OscConfig+0x5e>
 8002134:	4b8c      	ldr	r3, [pc, #560]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002140:	d10b      	bne.n	800215a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002142:	4b89      	ldr	r3, [pc, #548]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d06c      	beq.n	8002228 <HAL_RCC_OscConfig+0x12c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d168      	bne.n	8002228 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e24c      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002162:	d106      	bne.n	8002172 <HAL_RCC_OscConfig+0x76>
 8002164:	4b80      	ldr	r3, [pc, #512]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a7f      	ldr	r2, [pc, #508]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 800216a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	e02e      	b.n	80021d0 <HAL_RCC_OscConfig+0xd4>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0x98>
 800217a:	4b7b      	ldr	r3, [pc, #492]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a7a      	ldr	r2, [pc, #488]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	4b78      	ldr	r3, [pc, #480]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a77      	ldr	r2, [pc, #476]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 800218c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	e01d      	b.n	80021d0 <HAL_RCC_OscConfig+0xd4>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800219c:	d10c      	bne.n	80021b8 <HAL_RCC_OscConfig+0xbc>
 800219e:	4b72      	ldr	r3, [pc, #456]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a71      	ldr	r2, [pc, #452]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	4b6f      	ldr	r3, [pc, #444]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a6e      	ldr	r2, [pc, #440]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	e00b      	b.n	80021d0 <HAL_RCC_OscConfig+0xd4>
 80021b8:	4b6b      	ldr	r3, [pc, #428]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a6a      	ldr	r2, [pc, #424]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c2:	6013      	str	r3, [r2, #0]
 80021c4:	4b68      	ldr	r3, [pc, #416]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a67      	ldr	r2, [pc, #412]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d013      	beq.n	8002200 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7fe f92e 	bl	8000438 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e0:	f7fe f92a 	bl	8000438 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b64      	cmp	r3, #100	; 0x64
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e200      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f2:	4b5d      	ldr	r3, [pc, #372]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0xe4>
 80021fe:	e014      	b.n	800222a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7fe f91a 	bl	8000438 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002208:	f7fe f916 	bl	8000438 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b64      	cmp	r3, #100	; 0x64
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e1ec      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221a:	4b53      	ldr	r3, [pc, #332]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x10c>
 8002226:	e000      	b.n	800222a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d063      	beq.n	80022fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002236:	4b4c      	ldr	r3, [pc, #304]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00b      	beq.n	800225a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002242:	4b49      	ldr	r3, [pc, #292]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b08      	cmp	r3, #8
 800224c:	d11c      	bne.n	8002288 <HAL_RCC_OscConfig+0x18c>
 800224e:	4b46      	ldr	r3, [pc, #280]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d116      	bne.n	8002288 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225a:	4b43      	ldr	r3, [pc, #268]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d005      	beq.n	8002272 <HAL_RCC_OscConfig+0x176>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d001      	beq.n	8002272 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e1c0      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002272:	4b3d      	ldr	r3, [pc, #244]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4939      	ldr	r1, [pc, #228]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002282:	4313      	orrs	r3, r2
 8002284:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002286:	e03a      	b.n	80022fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d020      	beq.n	80022d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002290:	4b36      	ldr	r3, [pc, #216]	; (800236c <HAL_RCC_OscConfig+0x270>)
 8002292:	2201      	movs	r2, #1
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7fe f8cf 	bl	8000438 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800229e:	f7fe f8cb 	bl	8000438 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e1a1      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b0:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f0      	beq.n	800229e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022bc:	4b2a      	ldr	r3, [pc, #168]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4927      	ldr	r1, [pc, #156]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]
 80022d0:	e015      	b.n	80022fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022d2:	4b26      	ldr	r3, [pc, #152]	; (800236c <HAL_RCC_OscConfig+0x270>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7fe f8ae 	bl	8000438 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e0:	f7fe f8aa 	bl	8000438 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e180      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d03a      	beq.n	8002380 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d019      	beq.n	8002346 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002312:	4b17      	ldr	r3, [pc, #92]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002314:	2201      	movs	r2, #1
 8002316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002318:	f7fe f88e 	bl	8000438 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002320:	f7fe f88a 	bl	8000438 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e160      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <HAL_RCC_OscConfig+0x26c>)
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800233e:	2001      	movs	r0, #1
 8002340:	f000 fa9c 	bl	800287c <RCC_Delay>
 8002344:	e01c      	b.n	8002380 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <HAL_RCC_OscConfig+0x274>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234c:	f7fe f874 	bl	8000438 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002352:	e00f      	b.n	8002374 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002354:	f7fe f870 	bl	8000438 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d908      	bls.n	8002374 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e146      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
 8002366:	bf00      	nop
 8002368:	40021000 	.word	0x40021000
 800236c:	42420000 	.word	0x42420000
 8002370:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002374:	4b92      	ldr	r3, [pc, #584]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1e9      	bne.n	8002354 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80a6 	beq.w	80024da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800238e:	2300      	movs	r3, #0
 8002390:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002392:	4b8b      	ldr	r3, [pc, #556]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10d      	bne.n	80023ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800239e:	4b88      	ldr	r3, [pc, #544]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	4a87      	ldr	r2, [pc, #540]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a8:	61d3      	str	r3, [r2, #28]
 80023aa:	4b85      	ldr	r3, [pc, #532]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b6:	2301      	movs	r3, #1
 80023b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ba:	4b82      	ldr	r3, [pc, #520]	; (80025c4 <HAL_RCC_OscConfig+0x4c8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d118      	bne.n	80023f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c6:	4b7f      	ldr	r3, [pc, #508]	; (80025c4 <HAL_RCC_OscConfig+0x4c8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a7e      	ldr	r2, [pc, #504]	; (80025c4 <HAL_RCC_OscConfig+0x4c8>)
 80023cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d2:	f7fe f831 	bl	8000438 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023da:	f7fe f82d 	bl	8000438 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b64      	cmp	r3, #100	; 0x64
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e103      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ec:	4b75      	ldr	r3, [pc, #468]	; (80025c4 <HAL_RCC_OscConfig+0x4c8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d106      	bne.n	800240e <HAL_RCC_OscConfig+0x312>
 8002400:	4b6f      	ldr	r3, [pc, #444]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4a6e      	ldr	r2, [pc, #440]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6213      	str	r3, [r2, #32]
 800240c:	e02d      	b.n	800246a <HAL_RCC_OscConfig+0x36e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10c      	bne.n	8002430 <HAL_RCC_OscConfig+0x334>
 8002416:	4b6a      	ldr	r3, [pc, #424]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	4a69      	ldr	r2, [pc, #420]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 800241c:	f023 0301 	bic.w	r3, r3, #1
 8002420:	6213      	str	r3, [r2, #32]
 8002422:	4b67      	ldr	r3, [pc, #412]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4a66      	ldr	r2, [pc, #408]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	f023 0304 	bic.w	r3, r3, #4
 800242c:	6213      	str	r3, [r2, #32]
 800242e:	e01c      	b.n	800246a <HAL_RCC_OscConfig+0x36e>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b05      	cmp	r3, #5
 8002436:	d10c      	bne.n	8002452 <HAL_RCC_OscConfig+0x356>
 8002438:	4b61      	ldr	r3, [pc, #388]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4a60      	ldr	r2, [pc, #384]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 800243e:	f043 0304 	orr.w	r3, r3, #4
 8002442:	6213      	str	r3, [r2, #32]
 8002444:	4b5e      	ldr	r3, [pc, #376]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4a5d      	ldr	r2, [pc, #372]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6213      	str	r3, [r2, #32]
 8002450:	e00b      	b.n	800246a <HAL_RCC_OscConfig+0x36e>
 8002452:	4b5b      	ldr	r3, [pc, #364]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	4a5a      	ldr	r2, [pc, #360]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	6213      	str	r3, [r2, #32]
 800245e:	4b58      	ldr	r3, [pc, #352]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	4a57      	ldr	r2, [pc, #348]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	f023 0304 	bic.w	r3, r3, #4
 8002468:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d015      	beq.n	800249e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002472:	f7fd ffe1 	bl	8000438 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002478:	e00a      	b.n	8002490 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247a:	f7fd ffdd 	bl	8000438 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	f241 3288 	movw	r2, #5000	; 0x1388
 8002488:	4293      	cmp	r3, r2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e0b1      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002490:	4b4b      	ldr	r3, [pc, #300]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0ee      	beq.n	800247a <HAL_RCC_OscConfig+0x37e>
 800249c:	e014      	b.n	80024c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249e:	f7fd ffcb 	bl	8000438 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a4:	e00a      	b.n	80024bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a6:	f7fd ffc7 	bl	8000438 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e09b      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024bc:	4b40      	ldr	r3, [pc, #256]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1ee      	bne.n	80024a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d105      	bne.n	80024da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ce:	4b3c      	ldr	r3, [pc, #240]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	4a3b      	ldr	r2, [pc, #236]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 8087 	beq.w	80025f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024e4:	4b36      	ldr	r3, [pc, #216]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 030c 	and.w	r3, r3, #12
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d061      	beq.n	80025b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d146      	bne.n	8002586 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f8:	4b33      	ldr	r3, [pc, #204]	; (80025c8 <HAL_RCC_OscConfig+0x4cc>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fe:	f7fd ff9b 	bl	8000438 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002506:	f7fd ff97 	bl	8000438 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e06d      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002518:	4b29      	ldr	r3, [pc, #164]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f0      	bne.n	8002506 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252c:	d108      	bne.n	8002540 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800252e:	4b24      	ldr	r3, [pc, #144]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	4921      	ldr	r1, [pc, #132]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002540:	4b1f      	ldr	r3, [pc, #124]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a19      	ldr	r1, [r3, #32]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	430b      	orrs	r3, r1
 8002552:	491b      	ldr	r1, [pc, #108]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002558:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <HAL_RCC_OscConfig+0x4cc>)
 800255a:	2201      	movs	r2, #1
 800255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7fd ff6b 	bl	8000438 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002566:	f7fd ff67 	bl	8000438 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e03d      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x46a>
 8002584:	e035      	b.n	80025f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <HAL_RCC_OscConfig+0x4cc>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258c:	f7fd ff54 	bl	8000438 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002594:	f7fd ff50 	bl	8000438 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e026      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_RCC_OscConfig+0x4c4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x498>
 80025b2:	e01e      	b.n	80025f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d107      	bne.n	80025cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e019      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40007000 	.word	0x40007000
 80025c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_RCC_OscConfig+0x500>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d106      	bne.n	80025ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d001      	beq.n	80025f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40021000 	.word	0x40021000

08002600 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0d0      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002614:	4b6a      	ldr	r3, [pc, #424]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d910      	bls.n	8002644 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002622:	4b67      	ldr	r3, [pc, #412]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 0207 	bic.w	r2, r3, #7
 800262a:	4965      	ldr	r1, [pc, #404]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	4b63      	ldr	r3, [pc, #396]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0b8      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d020      	beq.n	8002692 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800265c:	4b59      	ldr	r3, [pc, #356]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a58      	ldr	r2, [pc, #352]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002666:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002674:	4b53      	ldr	r3, [pc, #332]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a52      	ldr	r2, [pc, #328]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800267e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002680:	4b50      	ldr	r3, [pc, #320]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	494d      	ldr	r1, [pc, #308]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	4313      	orrs	r3, r2
 8002690:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d040      	beq.n	8002720 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d107      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a6:	4b47      	ldr	r3, [pc, #284]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d115      	bne.n	80026de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e07f      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d107      	bne.n	80026ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026be:	4b41      	ldr	r3, [pc, #260]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d109      	bne.n	80026de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e073      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ce:	4b3d      	ldr	r3, [pc, #244]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e06b      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026de:	4b39      	ldr	r3, [pc, #228]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f023 0203 	bic.w	r2, r3, #3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	4936      	ldr	r1, [pc, #216]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f0:	f7fd fea2 	bl	8000438 <HAL_GetTick>
 80026f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f6:	e00a      	b.n	800270e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f8:	f7fd fe9e 	bl	8000438 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f241 3288 	movw	r2, #5000	; 0x1388
 8002706:	4293      	cmp	r3, r2
 8002708:	d901      	bls.n	800270e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e053      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270e:	4b2d      	ldr	r3, [pc, #180]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 020c 	and.w	r2, r3, #12
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	429a      	cmp	r2, r3
 800271e:	d1eb      	bne.n	80026f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002720:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d210      	bcs.n	8002750 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272e:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 0207 	bic.w	r2, r3, #7
 8002736:	4922      	ldr	r1, [pc, #136]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273e:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e032      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800275c:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4916      	ldr	r1, [pc, #88]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d009      	beq.n	800278e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800277a:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	490e      	ldr	r1, [pc, #56]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800278e:	f000 f821 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8002792:	4602      	mov	r2, r0
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	490a      	ldr	r1, [pc, #40]	; (80027c8 <HAL_RCC_ClockConfig+0x1c8>)
 80027a0:	5ccb      	ldrb	r3, [r1, r3]
 80027a2:	fa22 f303 	lsr.w	r3, r2, r3
 80027a6:	4a09      	ldr	r2, [pc, #36]	; (80027cc <HAL_RCC_ClockConfig+0x1cc>)
 80027a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <HAL_RCC_ClockConfig+0x1d0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fd fe00 	bl	80003b4 <HAL_InitTick>

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40022000 	.word	0x40022000
 80027c4:	40021000 	.word	0x40021000
 80027c8:	08006da0 	.word	0x08006da0
 80027cc:	20000000 	.word	0x20000000
 80027d0:	20000004 	.word	0x20000004

080027d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	2300      	movs	r3, #0
 80027e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027ee:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <HAL_RCC_GetSysClockFreq+0x94>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d002      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0x30>
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d003      	beq.n	800280a <HAL_RCC_GetSysClockFreq+0x36>
 8002802:	e027      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002804:	4b19      	ldr	r3, [pc, #100]	; (800286c <HAL_RCC_GetSysClockFreq+0x98>)
 8002806:	613b      	str	r3, [r7, #16]
      break;
 8002808:	e027      	b.n	800285a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	0c9b      	lsrs	r3, r3, #18
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	4a17      	ldr	r2, [pc, #92]	; (8002870 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002814:	5cd3      	ldrb	r3, [r2, r3]
 8002816:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d010      	beq.n	8002844 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_RCC_GetSysClockFreq+0x94>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	0c5b      	lsrs	r3, r3, #17
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	4a11      	ldr	r2, [pc, #68]	; (8002874 <HAL_RCC_GetSysClockFreq+0xa0>)
 800282e:	5cd3      	ldrb	r3, [r2, r3]
 8002830:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a0d      	ldr	r2, [pc, #52]	; (800286c <HAL_RCC_GetSysClockFreq+0x98>)
 8002836:	fb03 f202 	mul.w	r2, r3, r2
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	e004      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a0c      	ldr	r2, [pc, #48]	; (8002878 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002848:	fb02 f303 	mul.w	r3, r2, r3
 800284c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	613b      	str	r3, [r7, #16]
      break;
 8002852:	e002      	b.n	800285a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_RCC_GetSysClockFreq+0x98>)
 8002856:	613b      	str	r3, [r7, #16]
      break;
 8002858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800285a:	693b      	ldr	r3, [r7, #16]
}
 800285c:	4618      	mov	r0, r3
 800285e:	371c      	adds	r7, #28
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40021000 	.word	0x40021000
 800286c:	007a1200 	.word	0x007a1200
 8002870:	08006db0 	.word	0x08006db0
 8002874:	08006dc0 	.word	0x08006dc0
 8002878:	003d0900 	.word	0x003d0900

0800287c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002884:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <RCC_Delay+0x34>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a0a      	ldr	r2, [pc, #40]	; (80028b4 <RCC_Delay+0x38>)
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	0a5b      	lsrs	r3, r3, #9
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	fb02 f303 	mul.w	r3, r2, r3
 8002896:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002898:	bf00      	nop
  }
  while (Delay --);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1e5a      	subs	r2, r3, #1
 800289e:	60fa      	str	r2, [r7, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f9      	bne.n	8002898 <RCC_Delay+0x1c>
}
 80028a4:	bf00      	nop
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	20000000 	.word	0x20000000
 80028b4:	10624dd3 	.word	0x10624dd3

080028b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d07d      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80028d4:	2300      	movs	r3, #0
 80028d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d8:	4b4f      	ldr	r3, [pc, #316]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10d      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e4:	4b4c      	ldr	r3, [pc, #304]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	4a4b      	ldr	r2, [pc, #300]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ee:	61d3      	str	r3, [r2, #28]
 80028f0:	4b49      	ldr	r3, [pc, #292]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028fc:	2301      	movs	r3, #1
 80028fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002900:	4b46      	ldr	r3, [pc, #280]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002908:	2b00      	cmp	r3, #0
 800290a:	d118      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800290c:	4b43      	ldr	r3, [pc, #268]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a42      	ldr	r2, [pc, #264]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002916:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002918:	f7fd fd8e 	bl	8000438 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291e:	e008      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002920:	f7fd fd8a 	bl	8000438 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	; 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e06d      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002932:	4b3a      	ldr	r3, [pc, #232]	; (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800293e:	4b36      	ldr	r3, [pc, #216]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002946:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d02e      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	429a      	cmp	r2, r3
 800295a:	d027      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800295c:	4b2e      	ldr	r3, [pc, #184]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002964:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002966:	4b2e      	ldr	r3, [pc, #184]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002968:	2201      	movs	r2, #1
 800296a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800296c:	4b2c      	ldr	r3, [pc, #176]	; (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002972:	4a29      	ldr	r2, [pc, #164]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d014      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7fd fd59 	bl	8000438 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002988:	e00a      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298a:	f7fd fd55 	bl	8000438 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f241 3288 	movw	r2, #5000	; 0x1388
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e036      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a0:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0ee      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ac:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4917      	ldr	r1, [pc, #92]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029be:	7dfb      	ldrb	r3, [r7, #23]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d105      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c4:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	4a13      	ldr	r2, [pc, #76]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d008      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029dc:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	490b      	ldr	r1, [pc, #44]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d008      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029fa:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	4904      	ldr	r1, [pc, #16]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40007000 	.word	0x40007000
 8002a20:	42420440 	.word	0x42420440

08002a24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	4638      	mov	r0, r7
 8002a2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr

08002a3e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b085      	sub	sp, #20
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002a4e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002a52:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr

08002a6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b085      	sub	sp, #20
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002a72:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002a76:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	4013      	ands	r3, r2
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	4638      	mov	r0, r7
 8002ac0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr

08002af0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b09d      	sub	sp, #116	; 0x74
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b16:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	78db      	ldrb	r3, [r3, #3]
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d81f      	bhi.n	8002b62 <USB_ActivateEndpoint+0x72>
 8002b22:	a201      	add	r2, pc, #4	; (adr r2, 8002b28 <USB_ActivateEndpoint+0x38>)
 8002b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b28:	08002b39 	.word	0x08002b39
 8002b2c:	08002b55 	.word	0x08002b55
 8002b30:	08002b6b 	.word	0x08002b6b
 8002b34:	08002b47 	.word	0x08002b47
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002b38:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002b3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b40:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002b44:	e012      	b.n	8002b6c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002b46:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002b4a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002b4e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002b52:	e00b      	b.n	8002b6c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002b54:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002b58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b5c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002b60:	e004      	b.n	8002b6c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8002b68:	e000      	b.n	8002b6c <USB_ActivateEndpoint+0x7c>
      break;
 8002b6a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	441a      	add	r2, r3
 8002b76:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	441a      	add	r2, r3
 8002bbc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	7b1b      	ldrb	r3, [r3, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f040 8178 	bne.w	8002ece <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	785b      	ldrb	r3, [r3, #1]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 8084 	beq.w	8002cf0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	61bb      	str	r3, [r7, #24]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	011a      	lsls	r2, r3, #4
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	88db      	ldrh	r3, [r3, #6]
 8002c10:	085b      	lsrs	r3, r3, #1
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	881b      	ldrh	r3, [r3, #0]
 8002c28:	827b      	strh	r3, [r7, #18]
 8002c2a:	8a7b      	ldrh	r3, [r7, #18]
 8002c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d01b      	beq.n	8002c6c <USB_ActivateEndpoint+0x17c>
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4a:	823b      	strh	r3, [r7, #16]
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	441a      	add	r2, r3
 8002c56:	8a3b      	ldrh	r3, [r7, #16]
 8002c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	78db      	ldrb	r3, [r3, #3]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d020      	beq.n	8002cb6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c8a:	81bb      	strh	r3, [r7, #12]
 8002c8c:	89bb      	ldrh	r3, [r7, #12]
 8002c8e:	f083 0320 	eor.w	r3, r3, #32
 8002c92:	81bb      	strh	r3, [r7, #12]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	441a      	add	r2, r3
 8002c9e:	89bb      	ldrh	r3, [r7, #12]
 8002ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	8013      	strh	r3, [r2, #0]
 8002cb4:	e2d5      	b.n	8003262 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ccc:	81fb      	strh	r3, [r7, #14]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	441a      	add	r2, r3
 8002cd8:	89fb      	ldrh	r3, [r7, #14]
 8002cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	8013      	strh	r3, [r2, #0]
 8002cee:	e2b8      	b.n	8003262 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	633b      	str	r3, [r7, #48]	; 0x30
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	4413      	add	r3, r2
 8002d02:	633b      	str	r3, [r7, #48]	; 0x30
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	011a      	lsls	r2, r3, #4
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	88db      	ldrh	r3, [r3, #6]
 8002d18:	085b      	lsrs	r3, r3, #1
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d22:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d34:	4413      	add	r3, r2
 8002d36:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	011a      	lsls	r2, r3, #4
 8002d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d40:	4413      	add	r3, r2
 8002d42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	801a      	strh	r2, [r3, #0]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	2b3e      	cmp	r3, #62	; 0x3e
 8002d5e:	d91d      	bls.n	8002d9c <USB_ActivateEndpoint+0x2ac>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	095b      	lsrs	r3, r3, #5
 8002d66:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d102      	bne.n	8002d7a <USB_ActivateEndpoint+0x28a>
 8002d74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d76:	3b01      	subs	r3, #1
 8002d78:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	029b      	lsls	r3, r3, #10
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	801a      	strh	r2, [r3, #0]
 8002d9a:	e026      	b.n	8002dea <USB_ActivateEndpoint+0x2fa>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10a      	bne.n	8002dba <USB_ActivateEndpoint+0x2ca>
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	801a      	strh	r2, [r3, #0]
 8002db8:	e017      	b.n	8002dea <USB_ActivateEndpoint+0x2fa>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	085b      	lsrs	r3, r3, #1
 8002dc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <USB_ActivateEndpoint+0x2e4>
 8002dce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	029b      	lsls	r3, r3, #10
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	4313      	orrs	r3, r2
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	847b      	strh	r3, [r7, #34]	; 0x22
 8002df8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d01b      	beq.n	8002e3a <USB_ActivateEndpoint+0x34a>
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e18:	843b      	strh	r3, [r7, #32]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	441a      	add	r2, r3
 8002e24:	8c3b      	ldrh	r3, [r7, #32]
 8002e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d124      	bne.n	8002e8c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e58:	83bb      	strh	r3, [r7, #28]
 8002e5a:	8bbb      	ldrh	r3, [r7, #28]
 8002e5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002e60:	83bb      	strh	r3, [r7, #28]
 8002e62:	8bbb      	ldrh	r3, [r7, #28]
 8002e64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e68:	83bb      	strh	r3, [r7, #28]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	441a      	add	r2, r3
 8002e74:	8bbb      	ldrh	r3, [r7, #28]
 8002e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	8013      	strh	r3, [r2, #0]
 8002e8a:	e1ea      	b.n	8003262 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea2:	83fb      	strh	r3, [r7, #30]
 8002ea4:	8bfb      	ldrh	r3, [r7, #30]
 8002ea6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002eaa:	83fb      	strh	r3, [r7, #30]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	441a      	add	r2, r3
 8002eb6:	8bfb      	ldrh	r3, [r7, #30]
 8002eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	8013      	strh	r3, [r2, #0]
 8002ecc:	e1c9      	b.n	8003262 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	78db      	ldrb	r3, [r3, #3]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d11e      	bne.n	8002f14 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eec:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	441a      	add	r2, r3
 8002efa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f06:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	8013      	strh	r3, [r2, #0]
 8002f12:	e01d      	b.n	8002f50 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8002f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	441a      	add	r2, r3
 8002f38:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f60:	4413      	add	r3, r2
 8002f62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	011a      	lsls	r2, r3, #4
 8002f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f72:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	891b      	ldrh	r3, [r3, #8]
 8002f78:	085b      	lsrs	r3, r3, #1
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f82:	801a      	strh	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	657b      	str	r3, [r7, #84]	; 0x54
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	461a      	mov	r2, r3
 8002f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f94:	4413      	add	r3, r2
 8002f96:	657b      	str	r3, [r7, #84]	; 0x54
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	011a      	lsls	r2, r3, #4
 8002f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002fa6:	653b      	str	r3, [r7, #80]	; 0x50
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	895b      	ldrh	r3, [r3, #10]
 8002fac:	085b      	lsrs	r3, r3, #1
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fb6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	785b      	ldrb	r3, [r3, #1]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f040 8093 	bne.w	80030e8 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002fd2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d01b      	beq.n	8003016 <USB_ActivateEndpoint+0x526>
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	441a      	add	r2, r3
 8003000:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800300a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800300e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003012:	b29b      	uxth	r3, r3
 8003014:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003024:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	d01b      	beq.n	8003066 <USB_ActivateEndpoint+0x576>
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	b29b      	uxth	r3, r3
 800303c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003044:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	441a      	add	r2, r3
 8003050:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800305a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800305e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003062:	b29b      	uxth	r3, r3
 8003064:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	b29b      	uxth	r3, r3
 8003074:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307c:	873b      	strh	r3, [r7, #56]	; 0x38
 800307e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003080:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003084:	873b      	strh	r3, [r7, #56]	; 0x38
 8003086:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003088:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800308c:	873b      	strh	r3, [r7, #56]	; 0x38
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	441a      	add	r2, r3
 8003098:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800309a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800309e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030c4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	441a      	add	r2, r3
 80030d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	8013      	strh	r3, [r2, #0]
 80030e6:	e0bc      	b.n	8003262 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80030f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01d      	beq.n	8003140 <USB_ActivateEndpoint+0x650>
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	b29b      	uxth	r3, r3
 8003112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	441a      	add	r2, r3
 8003128:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800312c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003134:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800313c:	b29b      	uxth	r3, r3
 800313e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003150:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01d      	beq.n	8003198 <USB_ActivateEndpoint+0x6a8>
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	b29b      	uxth	r3, r3
 800316a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800316e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003172:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	441a      	add	r2, r3
 8003180:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800318c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003190:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003194:	b29b      	uxth	r3, r3
 8003196:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	78db      	ldrb	r3, [r3, #3]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d024      	beq.n	80031ea <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80031ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80031be:	f083 0320 	eor.w	r3, r3, #32
 80031c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	441a      	add	r2, r3
 80031d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80031d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	8013      	strh	r3, [r2, #0]
 80031e8:	e01d      	b.n	8003226 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003200:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	441a      	add	r2, r3
 800320e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800321a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800321e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003222:	b29b      	uxth	r3, r3
 8003224:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	b29b      	uxth	r3, r3
 8003234:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	441a      	add	r2, r3
 800324a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800324e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800325a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800325e:	b29b      	uxth	r3, r3
 8003260:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003262:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8003266:	4618      	mov	r0, r3
 8003268:	3774      	adds	r7, #116	; 0x74
 800326a:	46bd      	mov	sp, r7
 800326c:	bc80      	pop	{r7}
 800326e:	4770      	bx	lr

08003270 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003270:	b480      	push	{r7}
 8003272:	b08d      	sub	sp, #52	; 0x34
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	7b1b      	ldrb	r3, [r3, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	f040 808e 	bne.w	80033a0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	785b      	ldrb	r3, [r3, #1]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d044      	beq.n	8003316 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	81bb      	strh	r3, [r7, #12]
 800329a:	89bb      	ldrh	r3, [r7, #12]
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01b      	beq.n	80032dc <USB_DeactivateEndpoint+0x6c>
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ba:	817b      	strh	r3, [r7, #10]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	441a      	add	r2, r3
 80032c6:	897b      	ldrh	r3, [r7, #10]
 80032c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032d8:	b29b      	uxth	r3, r3
 80032da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032f2:	813b      	strh	r3, [r7, #8]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	441a      	add	r2, r3
 80032fe:	893b      	ldrh	r3, [r7, #8]
 8003300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800330c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003310:	b29b      	uxth	r3, r3
 8003312:	8013      	strh	r3, [r2, #0]
 8003314:	e192      	b.n	800363c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	827b      	strh	r3, [r7, #18]
 8003324:	8a7b      	ldrh	r3, [r7, #18]
 8003326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d01b      	beq.n	8003366 <USB_DeactivateEndpoint+0xf6>
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	b29b      	uxth	r3, r3
 800333c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003344:	823b      	strh	r3, [r7, #16]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	441a      	add	r2, r3
 8003350:	8a3b      	ldrh	r3, [r7, #16]
 8003352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800335a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800335e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003362:	b29b      	uxth	r3, r3
 8003364:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	b29b      	uxth	r3, r3
 8003374:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337c:	81fb      	strh	r3, [r7, #14]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	441a      	add	r2, r3
 8003388:	89fb      	ldrh	r3, [r7, #14]
 800338a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800338e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800339a:	b29b      	uxth	r3, r3
 800339c:	8013      	strh	r3, [r2, #0]
 800339e:	e14d      	b.n	800363c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	785b      	ldrb	r3, [r3, #1]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f040 80a5 	bne.w	80034f4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	843b      	strh	r3, [r7, #32]
 80033b8:	8c3b      	ldrh	r3, [r7, #32]
 80033ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d01b      	beq.n	80033fa <USB_DeactivateEndpoint+0x18a>
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d8:	83fb      	strh	r3, [r7, #30]
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	441a      	add	r2, r3
 80033e4:	8bfb      	ldrh	r3, [r7, #30]
 80033e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	83bb      	strh	r3, [r7, #28]
 8003408:	8bbb      	ldrh	r3, [r7, #28]
 800340a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d01b      	beq.n	800344a <USB_DeactivateEndpoint+0x1da>
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	b29b      	uxth	r3, r3
 8003420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003428:	837b      	strh	r3, [r7, #26]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	441a      	add	r2, r3
 8003434:	8b7b      	ldrh	r3, [r7, #26]
 8003436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800343a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800343e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003442:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003446:	b29b      	uxth	r3, r3
 8003448:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	b29b      	uxth	r3, r3
 8003458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800345c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003460:	833b      	strh	r3, [r7, #24]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	441a      	add	r2, r3
 800346c:	8b3b      	ldrh	r3, [r7, #24]
 800346e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800347a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800347e:	b29b      	uxth	r3, r3
 8003480:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	b29b      	uxth	r3, r3
 8003490:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003498:	82fb      	strh	r3, [r7, #22]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	441a      	add	r2, r3
 80034a4:	8afb      	ldrh	r3, [r7, #22]
 80034a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034d0:	82bb      	strh	r3, [r7, #20]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	441a      	add	r2, r3
 80034dc:	8abb      	ldrh	r3, [r7, #20]
 80034de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	8013      	strh	r3, [r2, #0]
 80034f2:	e0a3      	b.n	800363c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003502:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d01b      	beq.n	8003544 <USB_DeactivateEndpoint+0x2d4>
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	b29b      	uxth	r3, r3
 800351a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800351e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003522:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	441a      	add	r2, r3
 800352e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003538:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800353c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003540:	b29b      	uxth	r3, r3
 8003542:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003552:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01b      	beq.n	8003594 <USB_DeactivateEndpoint+0x324>
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	b29b      	uxth	r3, r3
 800356a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800356e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003572:	853b      	strh	r3, [r7, #40]	; 0x28
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	441a      	add	r2, r3
 800357e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800358c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003590:	b29b      	uxth	r3, r3
 8003592:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035aa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	441a      	add	r2, r3
 80035b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80035b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	b29b      	uxth	r3, r3
 80035da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035e2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	441a      	add	r2, r3
 80035ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003600:	b29b      	uxth	r3, r3
 8003602:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	b29b      	uxth	r3, r3
 8003612:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800361a:	847b      	strh	r3, [r7, #34]	; 0x22
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	441a      	add	r2, r3
 8003626:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800362c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003638:	b29b      	uxth	r3, r3
 800363a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3734      	adds	r7, #52	; 0x34
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr

08003648 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b0c2      	sub	sp, #264	; 0x108
 800364c:	af00      	add	r7, sp, #0
 800364e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003652:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003656:	6018      	str	r0, [r3, #0]
 8003658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800365c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003660:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	785b      	ldrb	r3, [r3, #1]
 800366e:	2b01      	cmp	r3, #1
 8003670:	f040 86b7 	bne.w	80043e2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699a      	ldr	r2, [r3, #24]
 8003680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	429a      	cmp	r2, r3
 800368e:	d908      	bls.n	80036a2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80036a0:	e007      	b.n	80036b2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80036a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80036b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	7b1b      	ldrb	r3, [r3, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d13a      	bne.n	8003738 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80036c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6959      	ldr	r1, [r3, #20]
 80036ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	88da      	ldrh	r2, [r3, #6]
 80036da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036de:	b29b      	uxth	r3, r3
 80036e0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80036e4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80036e8:	6800      	ldr	r0, [r0, #0]
 80036ea:	f001 fc9c 	bl	8005026 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80036ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003708:	b29b      	uxth	r3, r3
 800370a:	461a      	mov	r2, r3
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	4413      	add	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	011a      	lsls	r2, r3, #4
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4413      	add	r3, r2
 8003724:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	801a      	strh	r2, [r3, #0]
 8003734:	f000 be1f 	b.w	8004376 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800373c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	78db      	ldrb	r3, [r3, #3]
 8003744:	2b02      	cmp	r3, #2
 8003746:	f040 8462 	bne.w	800400e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800374a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800374e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6a1a      	ldr	r2, [r3, #32]
 8003756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800375a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	429a      	cmp	r2, r3
 8003764:	f240 83df 	bls.w	8003f26 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800376c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	b29b      	uxth	r3, r3
 8003786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800378a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003796:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	441a      	add	r2, r3
 80037ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80037b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037b8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80037bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80037c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6a1a      	ldr	r2, [r3, #32]
 80037d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037d4:	1ad2      	subs	r2, r2, r3
 80037d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80037e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 81c7 	beq.w	8003b98 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800380a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800380e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	633b      	str	r3, [r7, #48]	; 0x30
 8003816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800381a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	785b      	ldrb	r3, [r3, #1]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d177      	bne.n	8003916 <USB_EPStartXfer+0x2ce>
 8003826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800382a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	62bb      	str	r3, [r7, #40]	; 0x28
 8003832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003836:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003840:	b29b      	uxth	r3, r3
 8003842:	461a      	mov	r2, r3
 8003844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003846:	4413      	add	r3, r2
 8003848:	62bb      	str	r3, [r7, #40]	; 0x28
 800384a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800384e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	011a      	lsls	r2, r3, #4
 8003858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385a:	4413      	add	r3, r2
 800385c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	b29b      	uxth	r3, r3
 8003868:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800386c:	b29a      	uxth	r2, r3
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	801a      	strh	r2, [r3, #0]
 8003872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003876:	2b3e      	cmp	r3, #62	; 0x3e
 8003878:	d921      	bls.n	80038be <USB_EPStartXfer+0x276>
 800387a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	2b00      	cmp	r3, #0
 800388e:	d104      	bne.n	800389a <USB_EPStartXfer+0x252>
 8003890:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003894:	3b01      	subs	r3, #1
 8003896:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	b29a      	uxth	r2, r3
 80038a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	029b      	lsls	r3, r3, #10
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	4313      	orrs	r3, r2
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	801a      	strh	r2, [r3, #0]
 80038bc:	e050      	b.n	8003960 <USB_EPStartXfer+0x318>
 80038be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10a      	bne.n	80038dc <USB_EPStartXfer+0x294>
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	801a      	strh	r2, [r3, #0]
 80038da:	e041      	b.n	8003960 <USB_EPStartXfer+0x318>
 80038dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80038e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d004      	beq.n	80038fc <USB_EPStartXfer+0x2b4>
 80038f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80038f6:	3301      	adds	r3, #1
 80038f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	b29a      	uxth	r2, r3
 8003902:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003906:	b29b      	uxth	r3, r3
 8003908:	029b      	lsls	r3, r3, #10
 800390a:	b29b      	uxth	r3, r3
 800390c:	4313      	orrs	r3, r2
 800390e:	b29a      	uxth	r2, r3
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	801a      	strh	r2, [r3, #0]
 8003914:	e024      	b.n	8003960 <USB_EPStartXfer+0x318>
 8003916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800391a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	785b      	ldrb	r3, [r3, #1]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d11c      	bne.n	8003960 <USB_EPStartXfer+0x318>
 8003926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800392a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003934:	b29b      	uxth	r3, r3
 8003936:	461a      	mov	r2, r3
 8003938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393a:	4413      	add	r3, r2
 800393c:	633b      	str	r3, [r7, #48]	; 0x30
 800393e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	011a      	lsls	r2, r3, #4
 800394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394e:	4413      	add	r3, r2
 8003950:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800395a:	b29a      	uxth	r2, r3
 800395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	895b      	ldrh	r3, [r3, #10]
 800396c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6959      	ldr	r1, [r3, #20]
 800397c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003980:	b29b      	uxth	r3, r3
 8003982:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003986:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800398a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800398e:	6800      	ldr	r0, [r0, #0]
 8003990:	f001 fb49 	bl	8005026 <USB_WritePMA>
            ep->xfer_buff += len;
 8003994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695a      	ldr	r2, [r3, #20]
 80039a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039a4:	441a      	add	r2, r3
 80039a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80039b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6a1a      	ldr	r2, [r3, #32]
 80039be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d90f      	bls.n	80039ee <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80039ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6a1a      	ldr	r2, [r3, #32]
 80039da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039de:	1ad2      	subs	r2, r2, r3
 80039e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	621a      	str	r2, [r3, #32]
 80039ec:	e00e      	b.n	8003a0c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80039ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80039fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	785b      	ldrb	r3, [r3, #1]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d177      	bne.n	8003b0c <USB_EPStartXfer+0x4c4>
 8003a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	61bb      	str	r3, [r7, #24]
 8003a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
 8003a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	011a      	lsls	r2, r3, #4
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	4413      	add	r3, r2
 8003a52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	801a      	strh	r2, [r3, #0]
 8003a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a6c:	2b3e      	cmp	r3, #62	; 0x3e
 8003a6e:	d921      	bls.n	8003ab4 <USB_EPStartXfer+0x46c>
 8003a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a7e:	f003 031f 	and.w	r3, r3, #31
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d104      	bne.n	8003a90 <USB_EPStartXfer+0x448>
 8003a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	029b      	lsls	r3, r3, #10
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	801a      	strh	r2, [r3, #0]
 8003ab2:	e056      	b.n	8003b62 <USB_EPStartXfer+0x51a>
 8003ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10a      	bne.n	8003ad2 <USB_EPStartXfer+0x48a>
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ac6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	801a      	strh	r2, [r3, #0]
 8003ad0:	e047      	b.n	8003b62 <USB_EPStartXfer+0x51a>
 8003ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ad6:	085b      	lsrs	r3, r3, #1
 8003ad8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d004      	beq.n	8003af2 <USB_EPStartXfer+0x4aa>
 8003ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aec:	3301      	adds	r3, #1
 8003aee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	029b      	lsls	r3, r3, #10
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	4313      	orrs	r3, r2
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	801a      	strh	r2, [r3, #0]
 8003b0a:	e02a      	b.n	8003b62 <USB_EPStartXfer+0x51a>
 8003b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	785b      	ldrb	r3, [r3, #1]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d122      	bne.n	8003b62 <USB_EPStartXfer+0x51a>
 8003b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	623b      	str	r3, [r7, #32]
 8003b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	461a      	mov	r2, r3
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	623b      	str	r3, [r7, #32]
 8003b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	011a      	lsls	r2, r3, #4
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	4413      	add	r3, r2
 8003b52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b56:	61fb      	str	r3, [r7, #28]
 8003b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	891b      	ldrh	r3, [r3, #8]
 8003b6e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6959      	ldr	r1, [r3, #20]
 8003b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003b88:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003b8c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003b90:	6800      	ldr	r0, [r0, #0]
 8003b92:	f001 fa48 	bl	8005026 <USB_WritePMA>
 8003b96:	e3ee      	b.n	8004376 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	785b      	ldrb	r3, [r3, #1]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d177      	bne.n	8003c98 <USB_EPStartXfer+0x650>
 8003ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bc8:	4413      	add	r3, r2
 8003bca:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	011a      	lsls	r2, r3, #4
 8003bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bdc:	4413      	add	r3, r2
 8003bde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003be2:	647b      	str	r3, [r7, #68]	; 0x44
 8003be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bf2:	801a      	strh	r2, [r3, #0]
 8003bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bf8:	2b3e      	cmp	r3, #62	; 0x3e
 8003bfa:	d921      	bls.n	8003c40 <USB_EPStartXfer+0x5f8>
 8003bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c0a:	f003 031f 	and.w	r3, r3, #31
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d104      	bne.n	8003c1c <USB_EPStartXfer+0x5d4>
 8003c12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c16:	3b01      	subs	r3, #1
 8003c18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	029b      	lsls	r3, r3, #10
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c3c:	801a      	strh	r2, [r3, #0]
 8003c3e:	e056      	b.n	8003cee <USB_EPStartXfer+0x6a6>
 8003c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10a      	bne.n	8003c5e <USB_EPStartXfer+0x616>
 8003c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c5a:	801a      	strh	r2, [r3, #0]
 8003c5c:	e047      	b.n	8003cee <USB_EPStartXfer+0x6a6>
 8003c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c62:	085b      	lsrs	r3, r3, #1
 8003c64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d004      	beq.n	8003c7e <USB_EPStartXfer+0x636>
 8003c74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c78:	3301      	adds	r3, #1
 8003c7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	029b      	lsls	r3, r3, #10
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c94:	801a      	strh	r2, [r3, #0]
 8003c96:	e02a      	b.n	8003cee <USB_EPStartXfer+0x6a6>
 8003c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	785b      	ldrb	r3, [r3, #1]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d122      	bne.n	8003cee <USB_EPStartXfer+0x6a6>
 8003ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	653b      	str	r3, [r7, #80]	; 0x50
 8003cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc8:	4413      	add	r3, r2
 8003cca:	653b      	str	r3, [r7, #80]	; 0x50
 8003ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	011a      	lsls	r2, r3, #4
 8003cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cdc:	4413      	add	r3, r2
 8003cde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	891b      	ldrh	r3, [r3, #8]
 8003cfa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6959      	ldr	r1, [r3, #20]
 8003d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003d14:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003d18:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003d1c:	6800      	ldr	r0, [r0, #0]
 8003d1e:	f001 f982 	bl	8005026 <USB_WritePMA>
            ep->xfer_buff += len;
 8003d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695a      	ldr	r2, [r3, #20]
 8003d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d32:	441a      	add	r2, r3
 8003d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6a1a      	ldr	r2, [r3, #32]
 8003d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d90f      	bls.n	8003d7c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8003d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6a1a      	ldr	r2, [r3, #32]
 8003d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d6c:	1ad2      	subs	r2, r2, r3
 8003d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	621a      	str	r2, [r3, #32]
 8003d7a:	e00e      	b.n	8003d9a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8003d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8003d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2200      	movs	r2, #0
 8003d98:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	643b      	str	r3, [r7, #64]	; 0x40
 8003da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003daa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	785b      	ldrb	r3, [r3, #1]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d177      	bne.n	8003ea6 <USB_EPStartXfer+0x85e>
 8003db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd6:	4413      	add	r3, r2
 8003dd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	011a      	lsls	r2, r3, #4
 8003de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dea:	4413      	add	r3, r2
 8003dec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003df0:	637b      	str	r3, [r7, #52]	; 0x34
 8003df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e00:	801a      	strh	r2, [r3, #0]
 8003e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e06:	2b3e      	cmp	r3, #62	; 0x3e
 8003e08:	d921      	bls.n	8003e4e <USB_EPStartXfer+0x806>
 8003e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e18:	f003 031f 	and.w	r3, r3, #31
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d104      	bne.n	8003e2a <USB_EPStartXfer+0x7e2>
 8003e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e24:	3b01      	subs	r3, #1
 8003e26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	029b      	lsls	r3, r3, #10
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4a:	801a      	strh	r2, [r3, #0]
 8003e4c:	e050      	b.n	8003ef0 <USB_EPStartXfer+0x8a8>
 8003e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10a      	bne.n	8003e6c <USB_EPStartXfer+0x824>
 8003e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e68:	801a      	strh	r2, [r3, #0]
 8003e6a:	e041      	b.n	8003ef0 <USB_EPStartXfer+0x8a8>
 8003e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e70:	085b      	lsrs	r3, r3, #1
 8003e72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d004      	beq.n	8003e8c <USB_EPStartXfer+0x844>
 8003e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e86:	3301      	adds	r3, #1
 8003e88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	029b      	lsls	r3, r3, #10
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea2:	801a      	strh	r2, [r3, #0]
 8003ea4:	e024      	b.n	8003ef0 <USB_EPStartXfer+0x8a8>
 8003ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	785b      	ldrb	r3, [r3, #1]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d11c      	bne.n	8003ef0 <USB_EPStartXfer+0x8a8>
 8003eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003eba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eca:	4413      	add	r3, r2
 8003ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8003ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	011a      	lsls	r2, r3, #4
 8003edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ede:	4413      	add	r3, r2
 8003ee0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	895b      	ldrh	r3, [r3, #10]
 8003efc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6959      	ldr	r1, [r3, #20]
 8003f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003f16:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003f1a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003f1e:	6800      	ldr	r0, [r0, #0]
 8003f20:	f001 f881 	bl	8005026 <USB_WritePMA>
 8003f24:	e227      	b.n	8004376 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8003f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	441a      	add	r2, r3
 8003f7a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	461a      	mov	r2, r3
 8003fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fb2:	4413      	add	r3, r2
 8003fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	011a      	lsls	r2, r3, #4
 8003fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003fcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fd6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	891b      	ldrh	r3, [r3, #8]
 8003fe4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6959      	ldr	r1, [r3, #20]
 8003ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003ffe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004002:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004006:	6800      	ldr	r0, [r0, #0]
 8004008:	f001 f80d 	bl	8005026 <USB_WritePMA>
 800400c:	e1b3      	b.n	8004376 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800400e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004012:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6a1a      	ldr	r2, [r3, #32]
 800401a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800401e:	1ad2      	subs	r2, r2, r3
 8004020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800402c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004030:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800403a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b29b      	uxth	r3, r3
 800404a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 80c6 	beq.w	80041e0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004058:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	673b      	str	r3, [r7, #112]	; 0x70
 8004060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	785b      	ldrb	r3, [r3, #1]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d177      	bne.n	8004160 <USB_EPStartXfer+0xb18>
 8004070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004074:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	66bb      	str	r3, [r7, #104]	; 0x68
 800407c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004080:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800408a:	b29b      	uxth	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004090:	4413      	add	r3, r2
 8004092:	66bb      	str	r3, [r7, #104]	; 0x68
 8004094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	011a      	lsls	r2, r3, #4
 80040a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040a4:	4413      	add	r3, r2
 80040a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040aa:	667b      	str	r3, [r7, #100]	; 0x64
 80040ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040ba:	801a      	strh	r2, [r3, #0]
 80040bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040c0:	2b3e      	cmp	r3, #62	; 0x3e
 80040c2:	d921      	bls.n	8004108 <USB_EPStartXfer+0xac0>
 80040c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040c8:	095b      	lsrs	r3, r3, #5
 80040ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80040ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040d2:	f003 031f 	and.w	r3, r3, #31
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d104      	bne.n	80040e4 <USB_EPStartXfer+0xa9c>
 80040da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80040de:	3b01      	subs	r3, #1
 80040e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80040e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	029b      	lsls	r3, r3, #10
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	4313      	orrs	r3, r2
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004100:	b29a      	uxth	r2, r3
 8004102:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004104:	801a      	strh	r2, [r3, #0]
 8004106:	e050      	b.n	80041aa <USB_EPStartXfer+0xb62>
 8004108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <USB_EPStartXfer+0xade>
 8004110:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	b29b      	uxth	r3, r3
 8004116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800411a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800411e:	b29a      	uxth	r2, r3
 8004120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004122:	801a      	strh	r2, [r3, #0]
 8004124:	e041      	b.n	80041aa <USB_EPStartXfer+0xb62>
 8004126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800412a:	085b      	lsrs	r3, r3, #1
 800412c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d004      	beq.n	8004146 <USB_EPStartXfer+0xafe>
 800413c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004140:	3301      	adds	r3, #1
 8004142:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004146:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	b29a      	uxth	r2, r3
 800414c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004150:	b29b      	uxth	r3, r3
 8004152:	029b      	lsls	r3, r3, #10
 8004154:	b29b      	uxth	r3, r3
 8004156:	4313      	orrs	r3, r2
 8004158:	b29a      	uxth	r2, r3
 800415a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800415c:	801a      	strh	r2, [r3, #0]
 800415e:	e024      	b.n	80041aa <USB_EPStartXfer+0xb62>
 8004160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	785b      	ldrb	r3, [r3, #1]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d11c      	bne.n	80041aa <USB_EPStartXfer+0xb62>
 8004170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004174:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800417e:	b29b      	uxth	r3, r3
 8004180:	461a      	mov	r2, r3
 8004182:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004184:	4413      	add	r3, r2
 8004186:	673b      	str	r3, [r7, #112]	; 0x70
 8004188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800418c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	011a      	lsls	r2, r3, #4
 8004196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004198:	4413      	add	r3, r2
 800419a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800419e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80041aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	895b      	ldrh	r3, [r3, #10]
 80041b6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80041ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6959      	ldr	r1, [r3, #20]
 80041c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80041d0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80041d4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80041d8:	6800      	ldr	r0, [r0, #0]
 80041da:	f000 ff24 	bl	8005026 <USB_WritePMA>
 80041de:	e0ca      	b.n	8004376 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80041e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	785b      	ldrb	r3, [r3, #1]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d177      	bne.n	80042e0 <USB_EPStartXfer+0xc98>
 80041f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004200:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800420a:	b29b      	uxth	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004210:	4413      	add	r3, r2
 8004212:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	011a      	lsls	r2, r3, #4
 8004222:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004224:	4413      	add	r3, r2
 8004226:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800422a:	67bb      	str	r3, [r7, #120]	; 0x78
 800422c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	b29b      	uxth	r3, r3
 8004232:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004236:	b29a      	uxth	r2, r3
 8004238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800423a:	801a      	strh	r2, [r3, #0]
 800423c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004240:	2b3e      	cmp	r3, #62	; 0x3e
 8004242:	d921      	bls.n	8004288 <USB_EPStartXfer+0xc40>
 8004244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800424e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	2b00      	cmp	r3, #0
 8004258:	d104      	bne.n	8004264 <USB_EPStartXfer+0xc1c>
 800425a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800425e:	3b01      	subs	r3, #1
 8004260:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	b29a      	uxth	r2, r3
 800426a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800426e:	b29b      	uxth	r3, r3
 8004270:	029b      	lsls	r3, r3, #10
 8004272:	b29b      	uxth	r3, r3
 8004274:	4313      	orrs	r3, r2
 8004276:	b29b      	uxth	r3, r3
 8004278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800427c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004280:	b29a      	uxth	r2, r3
 8004282:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004284:	801a      	strh	r2, [r3, #0]
 8004286:	e05c      	b.n	8004342 <USB_EPStartXfer+0xcfa>
 8004288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10a      	bne.n	80042a6 <USB_EPStartXfer+0xc5e>
 8004290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	b29b      	uxth	r3, r3
 8004296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800429a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800429e:	b29a      	uxth	r2, r3
 80042a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042a2:	801a      	strh	r2, [r3, #0]
 80042a4:	e04d      	b.n	8004342 <USB_EPStartXfer+0xcfa>
 80042a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042aa:	085b      	lsrs	r3, r3, #1
 80042ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d004      	beq.n	80042c6 <USB_EPStartXfer+0xc7e>
 80042bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042c0:	3301      	adds	r3, #1
 80042c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	029b      	lsls	r3, r3, #10
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	4313      	orrs	r3, r2
 80042d8:	b29a      	uxth	r2, r3
 80042da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042dc:	801a      	strh	r2, [r3, #0]
 80042de:	e030      	b.n	8004342 <USB_EPStartXfer+0xcfa>
 80042e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	785b      	ldrb	r3, [r3, #1]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d128      	bne.n	8004342 <USB_EPStartXfer+0xcfa>
 80042f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004302:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800430c:	b29b      	uxth	r3, r3
 800430e:	461a      	mov	r2, r3
 8004310:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004314:	4413      	add	r3, r2
 8004316:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800431a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800431e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	011a      	lsls	r2, r3, #4
 8004328:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800432c:	4413      	add	r3, r2
 800432e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004332:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800433a:	b29a      	uxth	r2, r3
 800433c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004340:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	891b      	ldrh	r3, [r3, #8]
 800434e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6959      	ldr	r1, [r3, #20]
 800435e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004362:	b29b      	uxth	r3, r3
 8004364:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004368:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800436c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004370:	6800      	ldr	r0, [r0, #0]
 8004372:	f000 fe58 	bl	8005026 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800437a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	b29b      	uxth	r3, r3
 8004394:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800439c:	817b      	strh	r3, [r7, #10]
 800439e:	897b      	ldrh	r3, [r7, #10]
 80043a0:	f083 0310 	eor.w	r3, r3, #16
 80043a4:	817b      	strh	r3, [r7, #10]
 80043a6:	897b      	ldrh	r3, [r7, #10]
 80043a8:	f083 0320 	eor.w	r3, r3, #32
 80043ac:	817b      	strh	r3, [r7, #10]
 80043ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	441a      	add	r2, r3
 80043c8:	897b      	ldrh	r3, [r7, #10]
 80043ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043da:	b29b      	uxth	r3, r3
 80043dc:	8013      	strh	r3, [r2, #0]
 80043de:	f000 bcde 	b.w	8004d9e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80043e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	7b1b      	ldrb	r3, [r3, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f040 80bb 	bne.w	800456a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80043f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	699a      	ldr	r2, [r3, #24]
 8004400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	429a      	cmp	r2, r3
 800440e:	d917      	bls.n	8004440 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8004410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004414:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8004420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699a      	ldr	r2, [r3, #24]
 800442c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004430:	1ad2      	subs	r2, r2, r3
 8004432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	619a      	str	r2, [r3, #24]
 800443e:	e00e      	b.n	800445e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8004440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8004450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2200      	movs	r2, #0
 800445c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800445e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004462:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800446c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004470:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800447a:	b29b      	uxth	r3, r3
 800447c:	461a      	mov	r2, r3
 800447e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004482:	4413      	add	r3, r2
 8004484:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800448c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	011a      	lsls	r2, r3, #4
 8004496:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800449a:	4413      	add	r3, r2
 800449c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80044a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044b6:	801a      	strh	r2, [r3, #0]
 80044b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044bc:	2b3e      	cmp	r3, #62	; 0x3e
 80044be:	d924      	bls.n	800450a <USB_EPStartXfer+0xec2>
 80044c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044c4:	095b      	lsrs	r3, r3, #5
 80044c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044ce:	f003 031f 	and.w	r3, r3, #31
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d104      	bne.n	80044e0 <USB_EPStartXfer+0xe98>
 80044d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044da:	3b01      	subs	r3, #1
 80044dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	029b      	lsls	r3, r3, #10
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	4313      	orrs	r3, r2
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044fe:	b29a      	uxth	r2, r3
 8004500:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004504:	801a      	strh	r2, [r3, #0]
 8004506:	f000 bc10 	b.w	8004d2a <USB_EPStartXfer+0x16e2>
 800450a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10c      	bne.n	800452c <USB_EPStartXfer+0xee4>
 8004512:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	b29b      	uxth	r3, r3
 800451a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800451e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004522:	b29a      	uxth	r2, r3
 8004524:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004528:	801a      	strh	r2, [r3, #0]
 800452a:	e3fe      	b.n	8004d2a <USB_EPStartXfer+0x16e2>
 800452c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004530:	085b      	lsrs	r3, r3, #1
 8004532:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d004      	beq.n	800454c <USB_EPStartXfer+0xf04>
 8004542:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004546:	3301      	adds	r3, #1
 8004548:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800454c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	b29a      	uxth	r2, r3
 8004554:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004558:	b29b      	uxth	r3, r3
 800455a:	029b      	lsls	r3, r3, #10
 800455c:	b29b      	uxth	r3, r3
 800455e:	4313      	orrs	r3, r2
 8004560:	b29a      	uxth	r2, r3
 8004562:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004566:	801a      	strh	r2, [r3, #0]
 8004568:	e3df      	b.n	8004d2a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800456a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800456e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	78db      	ldrb	r3, [r3, #3]
 8004576:	2b02      	cmp	r3, #2
 8004578:	f040 8218 	bne.w	80049ac <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800457c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	785b      	ldrb	r3, [r3, #1]
 8004588:	2b00      	cmp	r3, #0
 800458a:	f040 809d 	bne.w	80046c8 <USB_EPStartXfer+0x1080>
 800458e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004592:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800459c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045b2:	4413      	add	r3, r2
 80045b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	011a      	lsls	r2, r3, #4
 80045c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045ca:	4413      	add	r3, r2
 80045cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045e6:	801a      	strh	r2, [r3, #0]
 80045e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	2b3e      	cmp	r3, #62	; 0x3e
 80045f6:	d92b      	bls.n	8004650 <USB_EPStartXfer+0x1008>
 80045f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	095b      	lsrs	r3, r3, #5
 8004606:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800460a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800460e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f003 031f 	and.w	r3, r3, #31
 800461a:	2b00      	cmp	r3, #0
 800461c:	d104      	bne.n	8004628 <USB_EPStartXfer+0xfe0>
 800461e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004622:	3b01      	subs	r3, #1
 8004624:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004628:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	b29a      	uxth	r2, r3
 8004630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004634:	b29b      	uxth	r3, r3
 8004636:	029b      	lsls	r3, r3, #10
 8004638:	b29b      	uxth	r3, r3
 800463a:	4313      	orrs	r3, r2
 800463c:	b29b      	uxth	r3, r3
 800463e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004646:	b29a      	uxth	r2, r3
 8004648:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800464c:	801a      	strh	r2, [r3, #0]
 800464e:	e070      	b.n	8004732 <USB_EPStartXfer+0x10ea>
 8004650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10c      	bne.n	800467a <USB_EPStartXfer+0x1032>
 8004660:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	b29b      	uxth	r3, r3
 8004668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800466c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004670:	b29a      	uxth	r2, r3
 8004672:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004676:	801a      	strh	r2, [r3, #0]
 8004678:	e05b      	b.n	8004732 <USB_EPStartXfer+0x10ea>
 800467a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800467e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	085b      	lsrs	r3, r3, #1
 8004688:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800468c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d004      	beq.n	80046aa <USB_EPStartXfer+0x1062>
 80046a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a4:	3301      	adds	r3, #1
 80046a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	029b      	lsls	r3, r3, #10
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	4313      	orrs	r3, r2
 80046be:	b29a      	uxth	r2, r3
 80046c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046c4:	801a      	strh	r2, [r3, #0]
 80046c6:	e034      	b.n	8004732 <USB_EPStartXfer+0x10ea>
 80046c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	785b      	ldrb	r3, [r3, #1]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d12c      	bne.n	8004732 <USB_EPStartXfer+0x10ea>
 80046d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	461a      	mov	r2, r3
 80046f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80046fc:	4413      	add	r3, r2
 80046fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	011a      	lsls	r2, r3, #4
 8004710:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004714:	4413      	add	r3, r2
 8004716:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800471a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800471e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	b29a      	uxth	r2, r3
 800472c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004730:	801a      	strh	r2, [r3, #0]
 8004732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	785b      	ldrb	r3, [r3, #1]
 800474c:	2b00      	cmp	r3, #0
 800474e:	f040 809d 	bne.w	800488c <USB_EPStartXfer+0x1244>
 8004752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004756:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004764:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800476e:	b29b      	uxth	r3, r3
 8004770:	461a      	mov	r2, r3
 8004772:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004776:	4413      	add	r3, r2
 8004778:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800477c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	011a      	lsls	r2, r3, #4
 800478a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800478e:	4413      	add	r3, r2
 8004790:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004798:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047aa:	801a      	strh	r2, [r3, #0]
 80047ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	2b3e      	cmp	r3, #62	; 0x3e
 80047ba:	d92b      	bls.n	8004814 <USB_EPStartXfer+0x11cc>
 80047bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	095b      	lsrs	r3, r3, #5
 80047ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f003 031f 	and.w	r3, r3, #31
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d104      	bne.n	80047ec <USB_EPStartXfer+0x11a4>
 80047e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e6:	3b01      	subs	r3, #1
 80047e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	029b      	lsls	r3, r3, #10
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	4313      	orrs	r3, r2
 8004800:	b29b      	uxth	r3, r3
 8004802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800480a:	b29a      	uxth	r2, r3
 800480c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004810:	801a      	strh	r2, [r3, #0]
 8004812:	e069      	b.n	80048e8 <USB_EPStartXfer+0x12a0>
 8004814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004818:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10c      	bne.n	800483e <USB_EPStartXfer+0x11f6>
 8004824:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	b29b      	uxth	r3, r3
 800482c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004834:	b29a      	uxth	r2, r3
 8004836:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800483a:	801a      	strh	r2, [r3, #0]
 800483c:	e054      	b.n	80048e8 <USB_EPStartXfer+0x12a0>
 800483e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	085b      	lsrs	r3, r3, #1
 800484c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d004      	beq.n	800486e <USB_EPStartXfer+0x1226>
 8004864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004868:	3301      	adds	r3, #1
 800486a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800486e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	b29a      	uxth	r2, r3
 8004876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800487a:	b29b      	uxth	r3, r3
 800487c:	029b      	lsls	r3, r3, #10
 800487e:	b29b      	uxth	r3, r3
 8004880:	4313      	orrs	r3, r2
 8004882:	b29a      	uxth	r2, r3
 8004884:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004888:	801a      	strh	r2, [r3, #0]
 800488a:	e02d      	b.n	80048e8 <USB_EPStartXfer+0x12a0>
 800488c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	785b      	ldrb	r3, [r3, #1]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d125      	bne.n	80048e8 <USB_EPStartXfer+0x12a0>
 800489c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80048b2:	4413      	add	r3, r2
 80048b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80048b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	011a      	lsls	r2, r3, #4
 80048c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80048ca:	4413      	add	r3, r2
 80048cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80048d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048e6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80048e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 8218 	beq.w	8004d2a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80048fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800491a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800491e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d005      	beq.n	8004932 <USB_EPStartXfer+0x12ea>
 8004926:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800492a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10d      	bne.n	800494e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004932:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800493a:	2b00      	cmp	r3, #0
 800493c:	f040 81f5 	bne.w	8004d2a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004940:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	f040 81ee 	bne.w	8004d2a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800494e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800495c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	b29b      	uxth	r3, r3
 800496c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004974:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8004978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800497c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	441a      	add	r2, r3
 8004992:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8004996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800499a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800499e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	8013      	strh	r3, [r2, #0]
 80049aa:	e1be      	b.n	8004d2a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80049ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	78db      	ldrb	r3, [r3, #3]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	f040 81b4 	bne.w	8004d26 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80049be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699a      	ldr	r2, [r3, #24]
 80049ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d917      	bls.n	8004a0a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80049da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80049ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049fa:	1ad2      	subs	r2, r2, r3
 80049fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	619a      	str	r2, [r3, #24]
 8004a08:	e00e      	b.n	8004a28 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8004a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8004a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2200      	movs	r2, #0
 8004a26:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	785b      	ldrb	r3, [r3, #1]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f040 8085 	bne.w	8004b44 <USB_EPStartXfer+0x14fc>
 8004a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	461a      	mov	r2, r3
 8004a5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a5e:	4413      	add	r3, r2
 8004a60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	011a      	lsls	r2, r3, #4
 8004a72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a76:	4413      	add	r3, r2
 8004a78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a92:	801a      	strh	r2, [r3, #0]
 8004a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a98:	2b3e      	cmp	r3, #62	; 0x3e
 8004a9a:	d923      	bls.n	8004ae4 <USB_EPStartXfer+0x149c>
 8004a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aaa:	f003 031f 	and.w	r3, r3, #31
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d104      	bne.n	8004abc <USB_EPStartXfer+0x1474>
 8004ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004abc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	029b      	lsls	r3, r3, #10
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ae0:	801a      	strh	r2, [r3, #0]
 8004ae2:	e060      	b.n	8004ba6 <USB_EPStartXfer+0x155e>
 8004ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10c      	bne.n	8004b06 <USB_EPStartXfer+0x14be>
 8004aec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b02:	801a      	strh	r2, [r3, #0]
 8004b04:	e04f      	b.n	8004ba6 <USB_EPStartXfer+0x155e>
 8004b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b0a:	085b      	lsrs	r3, r3, #1
 8004b0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d004      	beq.n	8004b26 <USB_EPStartXfer+0x14de>
 8004b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b20:	3301      	adds	r3, #1
 8004b22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004b26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	029b      	lsls	r3, r3, #10
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b40:	801a      	strh	r2, [r3, #0]
 8004b42:	e030      	b.n	8004ba6 <USB_EPStartXfer+0x155e>
 8004b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	785b      	ldrb	r3, [r3, #1]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d128      	bne.n	8004ba6 <USB_EPStartXfer+0x155e>
 8004b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	461a      	mov	r2, r3
 8004b74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b78:	4413      	add	r3, r2
 8004b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	011a      	lsls	r2, r3, #4
 8004b8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b90:	4413      	add	r3, r2
 8004b92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b96:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004ba4:	801a      	strh	r2, [r3, #0]
 8004ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004baa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	785b      	ldrb	r3, [r3, #1]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f040 8085 	bne.w	8004cd0 <USB_EPStartXfer+0x1688>
 8004bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	461a      	mov	r2, r3
 8004be6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004bea:	4413      	add	r3, r2
 8004bec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	011a      	lsls	r2, r3, #4
 8004bfe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c02:	4413      	add	r3, r2
 8004c04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c1e:	801a      	strh	r2, [r3, #0]
 8004c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c24:	2b3e      	cmp	r3, #62	; 0x3e
 8004c26:	d923      	bls.n	8004c70 <USB_EPStartXfer+0x1628>
 8004c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c36:	f003 031f 	and.w	r3, r3, #31
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d104      	bne.n	8004c48 <USB_EPStartXfer+0x1600>
 8004c3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c42:	3b01      	subs	r3, #1
 8004c44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	029b      	lsls	r3, r3, #10
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c6c:	801a      	strh	r2, [r3, #0]
 8004c6e:	e05c      	b.n	8004d2a <USB_EPStartXfer+0x16e2>
 8004c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10c      	bne.n	8004c92 <USB_EPStartXfer+0x164a>
 8004c78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c8e:	801a      	strh	r2, [r3, #0]
 8004c90:	e04b      	b.n	8004d2a <USB_EPStartXfer+0x16e2>
 8004c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c96:	085b      	lsrs	r3, r3, #1
 8004c98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d004      	beq.n	8004cb2 <USB_EPStartXfer+0x166a>
 8004ca8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cac:	3301      	adds	r3, #1
 8004cae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004cb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	029b      	lsls	r3, r3, #10
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ccc:	801a      	strh	r2, [r3, #0]
 8004cce:	e02c      	b.n	8004d2a <USB_EPStartXfer+0x16e2>
 8004cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	785b      	ldrb	r3, [r3, #1]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d124      	bne.n	8004d2a <USB_EPStartXfer+0x16e2>
 8004ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ce4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	011a      	lsls	r2, r3, #4
 8004d0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d0e:	4413      	add	r3, r2
 8004d10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d22:	801a      	strh	r2, [r3, #0]
 8004d24:	e001      	b.n	8004d2a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e03a      	b.n	8004da0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d50:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004d54:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004d58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004d5c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004d60:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004d64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d68:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	441a      	add	r2, r3
 8004d86:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b085      	sub	sp, #20
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	785b      	ldrb	r3, [r3, #1]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d020      	beq.n	8004dfe <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dd2:	81bb      	strh	r3, [r7, #12]
 8004dd4:	89bb      	ldrh	r3, [r7, #12]
 8004dd6:	f083 0310 	eor.w	r3, r3, #16
 8004dda:	81bb      	strh	r3, [r7, #12]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	441a      	add	r2, r3
 8004de6:	89bb      	ldrh	r3, [r7, #12]
 8004de8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	8013      	strh	r3, [r2, #0]
 8004dfc:	e01f      	b.n	8004e3e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e14:	81fb      	strh	r3, [r7, #14]
 8004e16:	89fb      	ldrh	r3, [r7, #14]
 8004e18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e1c:	81fb      	strh	r3, [r7, #14]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	441a      	add	r2, r3
 8004e28:	89fb      	ldrh	r3, [r7, #14]
 8004e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bc80      	pop	{r7}
 8004e48:	4770      	bx	lr

08004e4a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b087      	sub	sp, #28
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	7b1b      	ldrb	r3, [r3, #12]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f040 809d 	bne.w	8004f98 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	785b      	ldrb	r3, [r3, #1]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d04c      	beq.n	8004f00 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	823b      	strh	r3, [r7, #16]
 8004e74:	8a3b      	ldrh	r3, [r7, #16]
 8004e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d01b      	beq.n	8004eb6 <USB_EPClearStall+0x6c>
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e94:	81fb      	strh	r3, [r7, #14]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	441a      	add	r2, r3
 8004ea0:	89fb      	ldrh	r3, [r7, #14]
 8004ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	78db      	ldrb	r3, [r3, #3]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d06c      	beq.n	8004f98 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ed4:	81bb      	strh	r3, [r7, #12]
 8004ed6:	89bb      	ldrh	r3, [r7, #12]
 8004ed8:	f083 0320 	eor.w	r3, r3, #32
 8004edc:	81bb      	strh	r3, [r7, #12]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	441a      	add	r2, r3
 8004ee8:	89bb      	ldrh	r3, [r7, #12]
 8004eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	8013      	strh	r3, [r2, #0]
 8004efe:	e04b      	b.n	8004f98 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	82fb      	strh	r3, [r7, #22]
 8004f0e:	8afb      	ldrh	r3, [r7, #22]
 8004f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d01b      	beq.n	8004f50 <USB_EPClearStall+0x106>
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2e:	82bb      	strh	r3, [r7, #20]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	441a      	add	r2, r3
 8004f3a:	8abb      	ldrh	r3, [r7, #20]
 8004f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f66:	827b      	strh	r3, [r7, #18]
 8004f68:	8a7b      	ldrh	r3, [r7, #18]
 8004f6a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f6e:	827b      	strh	r3, [r7, #18]
 8004f70:	8a7b      	ldrh	r3, [r7, #18]
 8004f72:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f76:	827b      	strh	r3, [r7, #18]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	441a      	add	r2, r3
 8004f82:	8a7b      	ldrh	r3, [r7, #18]
 8004f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	371c      	adds	r7, #28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr

08004fa4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d103      	bne.n	8004fbe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2280      	movs	r2, #128	; 0x80
 8004fba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr

08004fca <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bc80      	pop	{r7}
 8004fdc:	4770      	bx	lr

08004fde <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bc80      	pop	{r7}
 8004ff0:	4770      	bx	lr

08004ff2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b085      	sub	sp, #20
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005000:	b29b      	uxth	r3, r3
 8005002:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005004:	68fb      	ldr	r3, [r7, #12]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr

08005010 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	bc80      	pop	{r7}
 8005024:	4770      	bx	lr

08005026 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005026:	b480      	push	{r7}
 8005028:	b08b      	sub	sp, #44	; 0x2c
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	4611      	mov	r1, r2
 8005032:	461a      	mov	r2, r3
 8005034:	460b      	mov	r3, r1
 8005036:	80fb      	strh	r3, [r7, #6]
 8005038:	4613      	mov	r3, r2
 800503a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800503c:	88bb      	ldrh	r3, [r7, #4]
 800503e:	3301      	adds	r3, #1
 8005040:	085b      	lsrs	r3, r3, #1
 8005042:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800504c:	88fb      	ldrh	r3, [r7, #6]
 800504e:	005a      	lsls	r2, r3, #1
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005058:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
 800505e:	e01e      	b.n	800509e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	3301      	adds	r3, #1
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	021b      	lsls	r3, r3, #8
 800506e:	b21a      	sxth	r2, r3
 8005070:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005074:	4313      	orrs	r3, r2
 8005076:	b21b      	sxth	r3, r3
 8005078:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	8a7a      	ldrh	r2, [r7, #18]
 800507e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	3302      	adds	r3, #2
 8005084:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	3302      	adds	r3, #2
 800508a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	3301      	adds	r3, #1
 8005090:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	3301      	adds	r3, #1
 8005096:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	3b01      	subs	r3, #1
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1dd      	bne.n	8005060 <USB_WritePMA+0x3a>
  }
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop
 80050a8:	372c      	adds	r7, #44	; 0x2c
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bc80      	pop	{r7}
 80050ae:	4770      	bx	lr

080050b0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b08b      	sub	sp, #44	; 0x2c
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	4611      	mov	r1, r2
 80050bc:	461a      	mov	r2, r3
 80050be:	460b      	mov	r3, r1
 80050c0:	80fb      	strh	r3, [r7, #6]
 80050c2:	4613      	mov	r3, r2
 80050c4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80050c6:	88bb      	ldrh	r3, [r7, #4]
 80050c8:	085b      	lsrs	r3, r3, #1
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80050d6:	88fb      	ldrh	r3, [r7, #6]
 80050d8:	005a      	lsls	r2, r3, #1
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050e2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	627b      	str	r3, [r7, #36]	; 0x24
 80050e8:	e01b      	b.n	8005122 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	3302      	adds	r3, #2
 80050f6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	3301      	adds	r3, #1
 8005104:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	0a1b      	lsrs	r3, r3, #8
 800510a:	b2da      	uxtb	r2, r3
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	3301      	adds	r3, #1
 8005114:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	3302      	adds	r3, #2
 800511a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	3b01      	subs	r3, #1
 8005120:	627b      	str	r3, [r7, #36]	; 0x24
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e0      	bne.n	80050ea <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005128:	88bb      	ldrh	r3, [r7, #4]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	b29b      	uxth	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d007      	beq.n	8005144 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	b29b      	uxth	r3, r3
 800513a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	b2da      	uxtb	r2, r3
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	701a      	strb	r2, [r3, #0]
  }
}
 8005144:	bf00      	nop
 8005146:	372c      	adds	r7, #44	; 0x2c
 8005148:	46bd      	mov	sp, r7
 800514a:	bc80      	pop	{r7}
 800514c:	4770      	bx	lr

0800514e <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	460b      	mov	r3, r1
 8005158:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800515a:	2304      	movs	r3, #4
 800515c:	2203      	movs	r2, #3
 800515e:	2181      	movs	r1, #129	; 0x81
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f001 fc62 	bl	8006a2a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800516c:	2010      	movs	r0, #16
 800516e:	f001 fd6f 	bl	8006c50 <USBD_static_malloc>
 8005172:	4602      	mov	r2, r0
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8005184:	2302      	movs	r3, #2
 8005186:	e005      	b.n	8005194 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800518e:	2200      	movs	r2, #0
 8005190:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80051a8:	2181      	movs	r1, #129	; 0x81
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f001 fc63 	bl	8006a76 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d009      	beq.n	80051d4 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051c6:	4618      	mov	r0, r3
 80051c8:	f001 fd4e 	bl	8006c68 <USBD_static_free>
    pdev->pClassData = NULL;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051f0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800520a:	2b00      	cmp	r3, #0
 800520c:	d045      	beq.n	800529a <USBD_HID_Setup+0xba>
 800520e:	2b20      	cmp	r3, #32
 8005210:	f040 80d3 	bne.w	80053ba <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	785b      	ldrb	r3, [r3, #1]
 8005218:	3b02      	subs	r3, #2
 800521a:	2b09      	cmp	r3, #9
 800521c:	d835      	bhi.n	800528a <USBD_HID_Setup+0xaa>
 800521e:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <USBD_HID_Setup+0x44>)
 8005220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005224:	0800527b 	.word	0x0800527b
 8005228:	0800525b 	.word	0x0800525b
 800522c:	0800528b 	.word	0x0800528b
 8005230:	0800528b 	.word	0x0800528b
 8005234:	0800528b 	.word	0x0800528b
 8005238:	0800528b 	.word	0x0800528b
 800523c:	0800528b 	.word	0x0800528b
 8005240:	0800528b 	.word	0x0800528b
 8005244:	08005269 	.word	0x08005269
 8005248:	0800524d 	.word	0x0800524d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	885b      	ldrh	r3, [r3, #2]
 8005250:	b2db      	uxtb	r3, r3
 8005252:	461a      	mov	r2, r3
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	601a      	str	r2, [r3, #0]
          break;
 8005258:	e01e      	b.n	8005298 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	2201      	movs	r2, #1
 800525e:	4619      	mov	r1, r3
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f001 f922 	bl	80064aa <USBD_CtlSendData>
          break;
 8005266:	e017      	b.n	8005298 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	885b      	ldrh	r3, [r3, #2]
 800526c:	0a1b      	lsrs	r3, r3, #8
 800526e:	b29b      	uxth	r3, r3
 8005270:	b2db      	uxtb	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	605a      	str	r2, [r3, #4]
          break;
 8005278:	e00e      	b.n	8005298 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	3304      	adds	r3, #4
 800527e:	2201      	movs	r2, #1
 8005280:	4619      	mov	r1, r3
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f001 f911 	bl	80064aa <USBD_CtlSendData>
          break;
 8005288:	e006      	b.n	8005298 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800528a:	6839      	ldr	r1, [r7, #0]
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f001 f8a2 	bl	80063d6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005292:	2302      	movs	r3, #2
 8005294:	75fb      	strb	r3, [r7, #23]
          break;
 8005296:	bf00      	nop
      }
      break;
 8005298:	e096      	b.n	80053c8 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	785b      	ldrb	r3, [r3, #1]
 800529e:	2b0b      	cmp	r3, #11
 80052a0:	f200 8083 	bhi.w	80053aa <USBD_HID_Setup+0x1ca>
 80052a4:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <USBD_HID_Setup+0xcc>)
 80052a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052aa:	bf00      	nop
 80052ac:	080052dd 	.word	0x080052dd
 80052b0:	080053ab 	.word	0x080053ab
 80052b4:	080053ab 	.word	0x080053ab
 80052b8:	080053ab 	.word	0x080053ab
 80052bc:	080053ab 	.word	0x080053ab
 80052c0:	080053ab 	.word	0x080053ab
 80052c4:	08005305 	.word	0x08005305
 80052c8:	080053ab 	.word	0x080053ab
 80052cc:	080053ab 	.word	0x080053ab
 80052d0:	080053ab 	.word	0x080053ab
 80052d4:	0800535d 	.word	0x0800535d
 80052d8:	08005385 	.word	0x08005385
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	d107      	bne.n	80052f6 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80052e6:	f107 030e 	add.w	r3, r7, #14
 80052ea:	2202      	movs	r2, #2
 80052ec:	4619      	mov	r1, r3
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f001 f8db 	bl	80064aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052f4:	e060      	b.n	80053b8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80052f6:	6839      	ldr	r1, [r7, #0]
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f001 f86c 	bl	80063d6 <USBD_CtlError>
            ret = USBD_FAIL;
 80052fe:	2302      	movs	r3, #2
 8005300:	75fb      	strb	r3, [r7, #23]
          break;
 8005302:	e059      	b.n	80053b8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	885b      	ldrh	r3, [r3, #2]
 8005308:	0a1b      	lsrs	r3, r3, #8
 800530a:	b29b      	uxth	r3, r3
 800530c:	2b22      	cmp	r3, #34	; 0x22
 800530e:	d108      	bne.n	8005322 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	88db      	ldrh	r3, [r3, #6]
 8005314:	2b4a      	cmp	r3, #74	; 0x4a
 8005316:	bf28      	it	cs
 8005318:	234a      	movcs	r3, #74	; 0x4a
 800531a:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 800531c:	4b2d      	ldr	r3, [pc, #180]	; (80053d4 <USBD_HID_Setup+0x1f4>)
 800531e:	61bb      	str	r3, [r7, #24]
 8005320:	e015      	b.n	800534e <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	885b      	ldrh	r3, [r3, #2]
 8005326:	0a1b      	lsrs	r3, r3, #8
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b21      	cmp	r3, #33	; 0x21
 800532c:	d108      	bne.n	8005340 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800532e:	4b2a      	ldr	r3, [pc, #168]	; (80053d8 <USBD_HID_Setup+0x1f8>)
 8005330:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	88db      	ldrh	r3, [r3, #6]
 8005336:	2b09      	cmp	r3, #9
 8005338:	bf28      	it	cs
 800533a:	2309      	movcs	r3, #9
 800533c:	83fb      	strh	r3, [r7, #30]
 800533e:	e006      	b.n	800534e <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005340:	6839      	ldr	r1, [r7, #0]
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f001 f847 	bl	80063d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005348:	2302      	movs	r3, #2
 800534a:	75fb      	strb	r3, [r7, #23]
            break;
 800534c:	e034      	b.n	80053b8 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800534e:	8bfb      	ldrh	r3, [r7, #30]
 8005350:	461a      	mov	r2, r3
 8005352:	69b9      	ldr	r1, [r7, #24]
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f001 f8a8 	bl	80064aa <USBD_CtlSendData>
          break;
 800535a:	e02d      	b.n	80053b8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005362:	2b03      	cmp	r3, #3
 8005364:	d107      	bne.n	8005376 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	3308      	adds	r3, #8
 800536a:	2201      	movs	r2, #1
 800536c:	4619      	mov	r1, r3
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f001 f89b 	bl	80064aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005374:	e020      	b.n	80053b8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005376:	6839      	ldr	r1, [r7, #0]
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f001 f82c 	bl	80063d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800537e:	2302      	movs	r3, #2
 8005380:	75fb      	strb	r3, [r7, #23]
          break;
 8005382:	e019      	b.n	80053b8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800538a:	2b03      	cmp	r3, #3
 800538c:	d106      	bne.n	800539c <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	885b      	ldrh	r3, [r3, #2]
 8005392:	b2db      	uxtb	r3, r3
 8005394:	461a      	mov	r2, r3
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800539a:	e00d      	b.n	80053b8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800539c:	6839      	ldr	r1, [r7, #0]
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f001 f819 	bl	80063d6 <USBD_CtlError>
            ret = USBD_FAIL;
 80053a4:	2302      	movs	r3, #2
 80053a6:	75fb      	strb	r3, [r7, #23]
          break;
 80053a8:	e006      	b.n	80053b8 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80053aa:	6839      	ldr	r1, [r7, #0]
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f001 f812 	bl	80063d6 <USBD_CtlError>
          ret = USBD_FAIL;
 80053b2:	2302      	movs	r3, #2
 80053b4:	75fb      	strb	r3, [r7, #23]
          break;
 80053b6:	bf00      	nop
      }
      break;
 80053b8:	e006      	b.n	80053c8 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80053ba:	6839      	ldr	r1, [r7, #0]
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f001 f80a 	bl	80063d6 <USBD_CtlError>
      ret = USBD_FAIL;
 80053c2:	2302      	movs	r3, #2
 80053c4:	75fb      	strb	r3, [r7, #23]
      break;
 80053c6:	bf00      	nop
  }

  return ret;
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3720      	adds	r7, #32
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	200000c8 	.word	0x200000c8
 80053d8:	200000b0 	.word	0x200000b0

080053dc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2222      	movs	r2, #34	; 0x22
 80053e8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80053ea:	4b03      	ldr	r3, [pc, #12]	; (80053f8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	20000044 	.word	0x20000044

080053fc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2222      	movs	r2, #34	; 0x22
 8005408:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800540a:	4b03      	ldr	r3, [pc, #12]	; (8005418 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800540c:	4618      	mov	r0, r3
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	bc80      	pop	{r7}
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	20000068 	.word	0x20000068

0800541c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2222      	movs	r2, #34	; 0x22
 8005428:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800542a:	4b03      	ldr	r3, [pc, #12]	; (8005438 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800542c:	4618      	mov	r0, r3
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	bc80      	pop	{r7}
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	2000008c 	.word	0x2000008c

0800543c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800544e:	2200      	movs	r2, #0
 8005450:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	bc80      	pop	{r7}
 800545c:	4770      	bx	lr
	...

08005460 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	220a      	movs	r2, #10
 800546c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800546e:	4b03      	ldr	r3, [pc, #12]	; (800547c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005470:	4618      	mov	r0, r3
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	200000bc 	.word	0x200000bc

08005480 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	4613      	mov	r3, r2
 800548c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005494:	2302      	movs	r3, #2
 8005496:	e01a      	b.n	80054ce <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	79fa      	ldrb	r2, [r7, #7]
 80054c4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f001 fa4c 	bl	8006964 <USBD_LL_Init>

  return USBD_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b085      	sub	sp, #20
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80054e0:	2300      	movs	r3, #0
 80054e2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d006      	beq.n	80054f8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80054f2:	2300      	movs	r3, #0
 80054f4:	73fb      	strb	r3, [r7, #15]
 80054f6:	e001      	b.n	80054fc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80054f8:	2302      	movs	r3, #2
 80054fa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	bc80      	pop	{r7}
 8005506:	4770      	bx	lr

08005508 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f001 fa6f 	bl	80069f4 <USBD_LL_Start>

  return USBD_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr

08005534 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	460b      	mov	r3, r1
 800553e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005540:	2302      	movs	r3, #2
 8005542:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00c      	beq.n	8005568 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	78fa      	ldrb	r2, [r7, #3]
 8005558:	4611      	mov	r1, r2
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	4798      	blx	r3
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005564:	2300      	movs	r3, #0
 8005566:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b082      	sub	sp, #8
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	460b      	mov	r3, r1
 800557c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	78fa      	ldrb	r2, [r7, #3]
 8005588:	4611      	mov	r1, r2
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	4798      	blx	r3

  return USBD_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80055a8:	6839      	ldr	r1, [r7, #0]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fed7 	bl	800635e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80055be:	461a      	mov	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80055cc:	f003 031f 	and.w	r3, r3, #31
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d016      	beq.n	8005602 <USBD_LL_SetupStage+0x6a>
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d81c      	bhi.n	8005612 <USBD_LL_SetupStage+0x7a>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <USBD_LL_SetupStage+0x4a>
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d008      	beq.n	80055f2 <USBD_LL_SetupStage+0x5a>
 80055e0:	e017      	b.n	8005612 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80055e8:	4619      	mov	r1, r3
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f9ca 	bl	8005984 <USBD_StdDevReq>
      break;
 80055f0:	e01a      	b.n	8005628 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80055f8:	4619      	mov	r1, r3
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 fa2c 	bl	8005a58 <USBD_StdItfReq>
      break;
 8005600:	e012      	b.n	8005628 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005608:	4619      	mov	r1, r3
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fa6c 	bl	8005ae8 <USBD_StdEPReq>
      break;
 8005610:	e00a      	b.n	8005628 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005618:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800561c:	b2db      	uxtb	r3, r3
 800561e:	4619      	mov	r1, r3
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f001 fa47 	bl	8006ab4 <USBD_LL_StallEP>
      break;
 8005626:	bf00      	nop
  }

  return USBD_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b086      	sub	sp, #24
 8005636:	af00      	add	r7, sp, #0
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	460b      	mov	r3, r1
 800563c:	607a      	str	r2, [r7, #4]
 800563e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005640:	7afb      	ldrb	r3, [r7, #11]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d14b      	bne.n	80056de <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800564c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005654:	2b03      	cmp	r3, #3
 8005656:	d134      	bne.n	80056c2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	429a      	cmp	r2, r3
 8005662:	d919      	bls.n	8005698 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	68da      	ldr	r2, [r3, #12]
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	1ad2      	subs	r2, r2, r3
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800567a:	429a      	cmp	r2, r3
 800567c:	d203      	bcs.n	8005686 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005682:	b29b      	uxth	r3, r3
 8005684:	e002      	b.n	800568c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800568a:	b29b      	uxth	r3, r3
 800568c:	461a      	mov	r2, r3
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 ff38 	bl	8006506 <USBD_CtlContinueRx>
 8005696:	e038      	b.n	800570a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00a      	beq.n	80056ba <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80056aa:	2b03      	cmp	r3, #3
 80056ac:	d105      	bne.n	80056ba <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 ff35 	bl	800652a <USBD_CtlSendStatus>
 80056c0:	e023      	b.n	800570a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80056c8:	2b05      	cmp	r3, #5
 80056ca:	d11e      	bne.n	800570a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80056d4:	2100      	movs	r1, #0
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f001 f9ec 	bl	8006ab4 <USBD_LL_StallEP>
 80056dc:	e015      	b.n	800570a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00d      	beq.n	8005706 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d108      	bne.n	8005706 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	7afa      	ldrb	r2, [r7, #11]
 80056fe:	4611      	mov	r1, r2
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	4798      	blx	r3
 8005704:	e001      	b.n	800570a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005706:	2302      	movs	r3, #2
 8005708:	e000      	b.n	800570c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	460b      	mov	r3, r1
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005722:	7afb      	ldrb	r3, [r7, #11]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d17f      	bne.n	8005828 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	3314      	adds	r3, #20
 800572c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005734:	2b02      	cmp	r3, #2
 8005736:	d15c      	bne.n	80057f2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	429a      	cmp	r2, r3
 8005742:	d915      	bls.n	8005770 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	1ad2      	subs	r2, r2, r3
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	b29b      	uxth	r3, r3
 8005758:	461a      	mov	r2, r3
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f000 fec0 	bl	80064e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005762:	2300      	movs	r3, #0
 8005764:	2200      	movs	r2, #0
 8005766:	2100      	movs	r1, #0
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f001 fa4e 	bl	8006c0a <USBD_LL_PrepareReceive>
 800576e:	e04e      	b.n	800580e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	6912      	ldr	r2, [r2, #16]
 8005778:	fbb3 f1f2 	udiv	r1, r3, r2
 800577c:	fb01 f202 	mul.w	r2, r1, r2
 8005780:	1a9b      	subs	r3, r3, r2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d11c      	bne.n	80057c0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	689a      	ldr	r2, [r3, #8]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800578e:	429a      	cmp	r2, r3
 8005790:	d316      	bcc.n	80057c0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800579c:	429a      	cmp	r2, r3
 800579e:	d20f      	bcs.n	80057c0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80057a0:	2200      	movs	r2, #0
 80057a2:	2100      	movs	r1, #0
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 fe9c 	bl	80064e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057b2:	2300      	movs	r3, #0
 80057b4:	2200      	movs	r2, #0
 80057b6:	2100      	movs	r1, #0
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f001 fa26 	bl	8006c0a <USBD_LL_PrepareReceive>
 80057be:	e026      	b.n	800580e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d105      	bne.n	80057e2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80057e2:	2180      	movs	r1, #128	; 0x80
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f001 f965 	bl	8006ab4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 feb0 	bl	8006550 <USBD_CtlReceiveStatus>
 80057f0:	e00d      	b.n	800580e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80057f8:	2b04      	cmp	r3, #4
 80057fa:	d004      	beq.n	8005806 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005802:	2b00      	cmp	r3, #0
 8005804:	d103      	bne.n	800580e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005806:	2180      	movs	r1, #128	; 0x80
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f001 f953 	bl	8006ab4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005814:	2b01      	cmp	r3, #1
 8005816:	d11d      	bne.n	8005854 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f7ff fe81 	bl	8005520 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005826:	e015      	b.n	8005854 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00d      	beq.n	8005850 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800583a:	2b03      	cmp	r3, #3
 800583c:	d108      	bne.n	8005850 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	7afa      	ldrb	r2, [r7, #11]
 8005848:	4611      	mov	r1, r2
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	4798      	blx	r3
 800584e:	e001      	b.n	8005854 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005850:	2302      	movs	r3, #2
 8005852:	e000      	b.n	8005856 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b082      	sub	sp, #8
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005866:	2340      	movs	r3, #64	; 0x40
 8005868:	2200      	movs	r2, #0
 800586a:	2100      	movs	r1, #0
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f001 f8dc 	bl	8006a2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2240      	movs	r2, #64	; 0x40
 800587e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005882:	2340      	movs	r3, #64	; 0x40
 8005884:	2200      	movs	r2, #0
 8005886:	2180      	movs	r1, #128	; 0x80
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f001 f8ce 	bl	8006a2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2240      	movs	r2, #64	; 0x40
 8005898:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d009      	beq.n	80058d6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	6852      	ldr	r2, [r2, #4]
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	4611      	mov	r1, r2
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	4798      	blx	r3
  }

  return USBD_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	460b      	mov	r3, r1
 80058ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	78fa      	ldrb	r2, [r7, #3]
 80058f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bc80      	pop	{r7}
 80058fc:	4770      	bx	lr

080058fe <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2204      	movs	r2, #4
 8005916:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	bc80      	pop	{r7}
 8005924:	4770      	bx	lr

08005926 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005934:	2b04      	cmp	r3, #4
 8005936:	d105      	bne.n	8005944 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	bc80      	pop	{r7}
 800594e:	4770      	bx	lr

08005950 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800595e:	2b03      	cmp	r3, #3
 8005960:	d10b      	bne.n	800597a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d005      	beq.n	800597a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800599a:	2b40      	cmp	r3, #64	; 0x40
 800599c:	d005      	beq.n	80059aa <USBD_StdDevReq+0x26>
 800599e:	2b40      	cmp	r3, #64	; 0x40
 80059a0:	d84f      	bhi.n	8005a42 <USBD_StdDevReq+0xbe>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d009      	beq.n	80059ba <USBD_StdDevReq+0x36>
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	d14b      	bne.n	8005a42 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	6839      	ldr	r1, [r7, #0]
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	4798      	blx	r3
      break;
 80059b8:	e048      	b.n	8005a4c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	785b      	ldrb	r3, [r3, #1]
 80059be:	2b09      	cmp	r3, #9
 80059c0:	d839      	bhi.n	8005a36 <USBD_StdDevReq+0xb2>
 80059c2:	a201      	add	r2, pc, #4	; (adr r2, 80059c8 <USBD_StdDevReq+0x44>)
 80059c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c8:	08005a19 	.word	0x08005a19
 80059cc:	08005a2d 	.word	0x08005a2d
 80059d0:	08005a37 	.word	0x08005a37
 80059d4:	08005a23 	.word	0x08005a23
 80059d8:	08005a37 	.word	0x08005a37
 80059dc:	080059fb 	.word	0x080059fb
 80059e0:	080059f1 	.word	0x080059f1
 80059e4:	08005a37 	.word	0x08005a37
 80059e8:	08005a0f 	.word	0x08005a0f
 80059ec:	08005a05 	.word	0x08005a05
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f9dc 	bl	8005db0 <USBD_GetDescriptor>
          break;
 80059f8:	e022      	b.n	8005a40 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 fb3f 	bl	8006080 <USBD_SetAddress>
          break;
 8005a02:	e01d      	b.n	8005a40 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005a04:	6839      	ldr	r1, [r7, #0]
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fb7e 	bl	8006108 <USBD_SetConfig>
          break;
 8005a0c:	e018      	b.n	8005a40 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005a0e:	6839      	ldr	r1, [r7, #0]
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fc07 	bl	8006224 <USBD_GetConfig>
          break;
 8005a16:	e013      	b.n	8005a40 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005a18:	6839      	ldr	r1, [r7, #0]
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fc37 	bl	800628e <USBD_GetStatus>
          break;
 8005a20:	e00e      	b.n	8005a40 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005a22:	6839      	ldr	r1, [r7, #0]
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 fc65 	bl	80062f4 <USBD_SetFeature>
          break;
 8005a2a:	e009      	b.n	8005a40 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005a2c:	6839      	ldr	r1, [r7, #0]
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fc74 	bl	800631c <USBD_ClrFeature>
          break;
 8005a34:	e004      	b.n	8005a40 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005a36:	6839      	ldr	r1, [r7, #0]
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fccc 	bl	80063d6 <USBD_CtlError>
          break;
 8005a3e:	bf00      	nop
      }
      break;
 8005a40:	e004      	b.n	8005a4c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005a42:	6839      	ldr	r1, [r7, #0]
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 fcc6 	bl	80063d6 <USBD_CtlError>
      break;
 8005a4a:	bf00      	nop
  }

  return ret;
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop

08005a58 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a6e:	2b40      	cmp	r3, #64	; 0x40
 8005a70:	d005      	beq.n	8005a7e <USBD_StdItfReq+0x26>
 8005a72:	2b40      	cmp	r3, #64	; 0x40
 8005a74:	d82e      	bhi.n	8005ad4 <USBD_StdItfReq+0x7c>
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <USBD_StdItfReq+0x26>
 8005a7a:	2b20      	cmp	r3, #32
 8005a7c:	d12a      	bne.n	8005ad4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a84:	3b01      	subs	r3, #1
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d81d      	bhi.n	8005ac6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	889b      	ldrh	r3, [r3, #4]
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d813      	bhi.n	8005abc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	6839      	ldr	r1, [r7, #0]
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	4798      	blx	r3
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	88db      	ldrh	r3, [r3, #6]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d110      	bne.n	8005ad0 <USBD_StdItfReq+0x78>
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10d      	bne.n	8005ad0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fd38 	bl	800652a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005aba:	e009      	b.n	8005ad0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005abc:	6839      	ldr	r1, [r7, #0]
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fc89 	bl	80063d6 <USBD_CtlError>
          break;
 8005ac4:	e004      	b.n	8005ad0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005ac6:	6839      	ldr	r1, [r7, #0]
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fc84 	bl	80063d6 <USBD_CtlError>
          break;
 8005ace:	e000      	b.n	8005ad2 <USBD_StdItfReq+0x7a>
          break;
 8005ad0:	bf00      	nop
      }
      break;
 8005ad2:	e004      	b.n	8005ade <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005ad4:	6839      	ldr	r1, [r7, #0]
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fc7d 	bl	80063d6 <USBD_CtlError>
      break;
 8005adc:	bf00      	nop
  }

  return USBD_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005af2:	2300      	movs	r3, #0
 8005af4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	889b      	ldrh	r3, [r3, #4]
 8005afa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b04:	2b40      	cmp	r3, #64	; 0x40
 8005b06:	d007      	beq.n	8005b18 <USBD_StdEPReq+0x30>
 8005b08:	2b40      	cmp	r3, #64	; 0x40
 8005b0a:	f200 8146 	bhi.w	8005d9a <USBD_StdEPReq+0x2b2>
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <USBD_StdEPReq+0x40>
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	f040 8141 	bne.w	8005d9a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	6839      	ldr	r1, [r7, #0]
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	4798      	blx	r3
      break;
 8005b26:	e13d      	b.n	8005da4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b30:	2b20      	cmp	r3, #32
 8005b32:	d10a      	bne.n	8005b4a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	4798      	blx	r3
 8005b42:	4603      	mov	r3, r0
 8005b44:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
 8005b48:	e12d      	b.n	8005da6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	785b      	ldrb	r3, [r3, #1]
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d007      	beq.n	8005b62 <USBD_StdEPReq+0x7a>
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	f300 811b 	bgt.w	8005d8e <USBD_StdEPReq+0x2a6>
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d072      	beq.n	8005c42 <USBD_StdEPReq+0x15a>
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d03a      	beq.n	8005bd6 <USBD_StdEPReq+0xee>
 8005b60:	e115      	b.n	8005d8e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d002      	beq.n	8005b72 <USBD_StdEPReq+0x8a>
 8005b6c:	2b03      	cmp	r3, #3
 8005b6e:	d015      	beq.n	8005b9c <USBD_StdEPReq+0xb4>
 8005b70:	e02b      	b.n	8005bca <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b72:	7bbb      	ldrb	r3, [r7, #14]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00c      	beq.n	8005b92 <USBD_StdEPReq+0xaa>
 8005b78:	7bbb      	ldrb	r3, [r7, #14]
 8005b7a:	2b80      	cmp	r3, #128	; 0x80
 8005b7c:	d009      	beq.n	8005b92 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005b7e:	7bbb      	ldrb	r3, [r7, #14]
 8005b80:	4619      	mov	r1, r3
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 ff96 	bl	8006ab4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005b88:	2180      	movs	r1, #128	; 0x80
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 ff92 	bl	8006ab4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b90:	e020      	b.n	8005bd4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8005b92:	6839      	ldr	r1, [r7, #0]
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 fc1e 	bl	80063d6 <USBD_CtlError>
              break;
 8005b9a:	e01b      	b.n	8005bd4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	885b      	ldrh	r3, [r3, #2]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10e      	bne.n	8005bc2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8005ba4:	7bbb      	ldrb	r3, [r7, #14]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00b      	beq.n	8005bc2 <USBD_StdEPReq+0xda>
 8005baa:	7bbb      	ldrb	r3, [r7, #14]
 8005bac:	2b80      	cmp	r3, #128	; 0x80
 8005bae:	d008      	beq.n	8005bc2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	88db      	ldrh	r3, [r3, #6]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d104      	bne.n	8005bc2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005bb8:	7bbb      	ldrb	r3, [r7, #14]
 8005bba:	4619      	mov	r1, r3
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 ff79 	bl	8006ab4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fcb1 	bl	800652a <USBD_CtlSendStatus>

              break;
 8005bc8:	e004      	b.n	8005bd4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8005bca:	6839      	ldr	r1, [r7, #0]
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fc02 	bl	80063d6 <USBD_CtlError>
              break;
 8005bd2:	bf00      	nop
          }
          break;
 8005bd4:	e0e0      	b.n	8005d98 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d002      	beq.n	8005be6 <USBD_StdEPReq+0xfe>
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d015      	beq.n	8005c10 <USBD_StdEPReq+0x128>
 8005be4:	e026      	b.n	8005c34 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005be6:	7bbb      	ldrb	r3, [r7, #14]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00c      	beq.n	8005c06 <USBD_StdEPReq+0x11e>
 8005bec:	7bbb      	ldrb	r3, [r7, #14]
 8005bee:	2b80      	cmp	r3, #128	; 0x80
 8005bf0:	d009      	beq.n	8005c06 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005bf2:	7bbb      	ldrb	r3, [r7, #14]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 ff5c 	bl	8006ab4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005bfc:	2180      	movs	r1, #128	; 0x80
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 ff58 	bl	8006ab4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c04:	e01c      	b.n	8005c40 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8005c06:	6839      	ldr	r1, [r7, #0]
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fbe4 	bl	80063d6 <USBD_CtlError>
              break;
 8005c0e:	e017      	b.n	8005c40 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	885b      	ldrh	r3, [r3, #2]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d112      	bne.n	8005c3e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005c18:	7bbb      	ldrb	r3, [r7, #14]
 8005c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d004      	beq.n	8005c2c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005c22:	7bbb      	ldrb	r3, [r7, #14]
 8005c24:	4619      	mov	r1, r3
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 ff63 	bl	8006af2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 fc7c 	bl	800652a <USBD_CtlSendStatus>
              }
              break;
 8005c32:	e004      	b.n	8005c3e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8005c34:	6839      	ldr	r1, [r7, #0]
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fbcd 	bl	80063d6 <USBD_CtlError>
              break;
 8005c3c:	e000      	b.n	8005c40 <USBD_StdEPReq+0x158>
              break;
 8005c3e:	bf00      	nop
          }
          break;
 8005c40:	e0aa      	b.n	8005d98 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d002      	beq.n	8005c52 <USBD_StdEPReq+0x16a>
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d032      	beq.n	8005cb6 <USBD_StdEPReq+0x1ce>
 8005c50:	e097      	b.n	8005d82 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c52:	7bbb      	ldrb	r3, [r7, #14]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d007      	beq.n	8005c68 <USBD_StdEPReq+0x180>
 8005c58:	7bbb      	ldrb	r3, [r7, #14]
 8005c5a:	2b80      	cmp	r3, #128	; 0x80
 8005c5c:	d004      	beq.n	8005c68 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8005c5e:	6839      	ldr	r1, [r7, #0]
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fbb8 	bl	80063d6 <USBD_CtlError>
                break;
 8005c66:	e091      	b.n	8005d8c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	da0b      	bge.n	8005c88 <USBD_StdEPReq+0x1a0>
 8005c70:	7bbb      	ldrb	r3, [r7, #14]
 8005c72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c76:	4613      	mov	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	3310      	adds	r3, #16
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	4413      	add	r3, r2
 8005c84:	3304      	adds	r3, #4
 8005c86:	e00b      	b.n	8005ca0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c88:	7bbb      	ldrb	r3, [r7, #14]
 8005c8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c8e:	4613      	mov	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2202      	movs	r2, #2
 8005cac:	4619      	mov	r1, r3
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fbfb 	bl	80064aa <USBD_CtlSendData>
              break;
 8005cb4:	e06a      	b.n	8005d8c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005cb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	da11      	bge.n	8005ce2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005cbe:	7bbb      	ldrb	r3, [r7, #14]
 8005cc0:	f003 020f 	and.w	r2, r3, #15
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	440b      	add	r3, r1
 8005cd0:	3318      	adds	r3, #24
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d117      	bne.n	8005d08 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005cd8:	6839      	ldr	r1, [r7, #0]
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fb7b 	bl	80063d6 <USBD_CtlError>
                  break;
 8005ce0:	e054      	b.n	8005d8c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005ce2:	7bbb      	ldrb	r3, [r7, #14]
 8005ce4:	f003 020f 	and.w	r2, r3, #15
 8005ce8:	6879      	ldr	r1, [r7, #4]
 8005cea:	4613      	mov	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	440b      	add	r3, r1
 8005cf4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d104      	bne.n	8005d08 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005cfe:	6839      	ldr	r1, [r7, #0]
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fb68 	bl	80063d6 <USBD_CtlError>
                  break;
 8005d06:	e041      	b.n	8005d8c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	da0b      	bge.n	8005d28 <USBD_StdEPReq+0x240>
 8005d10:	7bbb      	ldrb	r3, [r7, #14]
 8005d12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d16:	4613      	mov	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	3310      	adds	r3, #16
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	4413      	add	r3, r2
 8005d24:	3304      	adds	r3, #4
 8005d26:	e00b      	b.n	8005d40 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d28:	7bbb      	ldrb	r3, [r7, #14]
 8005d2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d2e:	4613      	mov	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	3304      	adds	r3, #4
 8005d40:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005d42:	7bbb      	ldrb	r3, [r7, #14]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <USBD_StdEPReq+0x266>
 8005d48:	7bbb      	ldrb	r3, [r7, #14]
 8005d4a:	2b80      	cmp	r3, #128	; 0x80
 8005d4c:	d103      	bne.n	8005d56 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	e00e      	b.n	8005d74 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005d56:	7bbb      	ldrb	r3, [r7, #14]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fee8 	bl	8006b30 <USBD_LL_IsStallEP>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	e002      	b.n	8005d74 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	2200      	movs	r2, #0
 8005d72:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2202      	movs	r2, #2
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fb95 	bl	80064aa <USBD_CtlSendData>
              break;
 8005d80:	e004      	b.n	8005d8c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8005d82:	6839      	ldr	r1, [r7, #0]
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fb26 	bl	80063d6 <USBD_CtlError>
              break;
 8005d8a:	bf00      	nop
          }
          break;
 8005d8c:	e004      	b.n	8005d98 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8005d8e:	6839      	ldr	r1, [r7, #0]
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fb20 	bl	80063d6 <USBD_CtlError>
          break;
 8005d96:	bf00      	nop
      }
      break;
 8005d98:	e004      	b.n	8005da4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fb1a 	bl	80063d6 <USBD_CtlError>
      break;
 8005da2:	bf00      	nop
  }

  return ret;
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
	...

08005db0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	885b      	ldrh	r3, [r3, #2]
 8005dca:	0a1b      	lsrs	r3, r3, #8
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	2b06      	cmp	r3, #6
 8005dd2:	f200 8128 	bhi.w	8006026 <USBD_GetDescriptor+0x276>
 8005dd6:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <USBD_GetDescriptor+0x2c>)
 8005dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ddc:	08005df9 	.word	0x08005df9
 8005de0:	08005e11 	.word	0x08005e11
 8005de4:	08005e51 	.word	0x08005e51
 8005de8:	08006027 	.word	0x08006027
 8005dec:	08006027 	.word	0x08006027
 8005df0:	08005fc7 	.word	0x08005fc7
 8005df4:	08005ff3 	.word	0x08005ff3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	7c12      	ldrb	r2, [r2, #16]
 8005e04:	f107 0108 	add.w	r1, r7, #8
 8005e08:	4610      	mov	r0, r2
 8005e0a:	4798      	blx	r3
 8005e0c:	60f8      	str	r0, [r7, #12]
      break;
 8005e0e:	e112      	b.n	8006036 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	7c1b      	ldrb	r3, [r3, #16]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10d      	bne.n	8005e34 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e20:	f107 0208 	add.w	r2, r7, #8
 8005e24:	4610      	mov	r0, r2
 8005e26:	4798      	blx	r3
 8005e28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	2202      	movs	r2, #2
 8005e30:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005e32:	e100      	b.n	8006036 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	f107 0208 	add.w	r2, r7, #8
 8005e40:	4610      	mov	r0, r2
 8005e42:	4798      	blx	r3
 8005e44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	701a      	strb	r2, [r3, #0]
      break;
 8005e4e:	e0f2      	b.n	8006036 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	885b      	ldrh	r3, [r3, #2]
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b05      	cmp	r3, #5
 8005e58:	f200 80ac 	bhi.w	8005fb4 <USBD_GetDescriptor+0x204>
 8005e5c:	a201      	add	r2, pc, #4	; (adr r2, 8005e64 <USBD_GetDescriptor+0xb4>)
 8005e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e62:	bf00      	nop
 8005e64:	08005e7d 	.word	0x08005e7d
 8005e68:	08005eb1 	.word	0x08005eb1
 8005e6c:	08005ee5 	.word	0x08005ee5
 8005e70:	08005f19 	.word	0x08005f19
 8005e74:	08005f4d 	.word	0x08005f4d
 8005e78:	08005f81 	.word	0x08005f81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00b      	beq.n	8005ea0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	7c12      	ldrb	r2, [r2, #16]
 8005e94:	f107 0108 	add.w	r1, r7, #8
 8005e98:	4610      	mov	r0, r2
 8005e9a:	4798      	blx	r3
 8005e9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e9e:	e091      	b.n	8005fc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ea0:	6839      	ldr	r1, [r7, #0]
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fa97 	bl	80063d6 <USBD_CtlError>
            err++;
 8005ea8:	7afb      	ldrb	r3, [r7, #11]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	72fb      	strb	r3, [r7, #11]
          break;
 8005eae:	e089      	b.n	8005fc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00b      	beq.n	8005ed4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	7c12      	ldrb	r2, [r2, #16]
 8005ec8:	f107 0108 	add.w	r1, r7, #8
 8005ecc:	4610      	mov	r0, r2
 8005ece:	4798      	blx	r3
 8005ed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ed2:	e077      	b.n	8005fc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ed4:	6839      	ldr	r1, [r7, #0]
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fa7d 	bl	80063d6 <USBD_CtlError>
            err++;
 8005edc:	7afb      	ldrb	r3, [r7, #11]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ee2:	e06f      	b.n	8005fc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00b      	beq.n	8005f08 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	7c12      	ldrb	r2, [r2, #16]
 8005efc:	f107 0108 	add.w	r1, r7, #8
 8005f00:	4610      	mov	r0, r2
 8005f02:	4798      	blx	r3
 8005f04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f06:	e05d      	b.n	8005fc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f08:	6839      	ldr	r1, [r7, #0]
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fa63 	bl	80063d6 <USBD_CtlError>
            err++;
 8005f10:	7afb      	ldrb	r3, [r7, #11]
 8005f12:	3301      	adds	r3, #1
 8005f14:	72fb      	strb	r3, [r7, #11]
          break;
 8005f16:	e055      	b.n	8005fc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00b      	beq.n	8005f3c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	7c12      	ldrb	r2, [r2, #16]
 8005f30:	f107 0108 	add.w	r1, r7, #8
 8005f34:	4610      	mov	r0, r2
 8005f36:	4798      	blx	r3
 8005f38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f3a:	e043      	b.n	8005fc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f3c:	6839      	ldr	r1, [r7, #0]
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fa49 	bl	80063d6 <USBD_CtlError>
            err++;
 8005f44:	7afb      	ldrb	r3, [r7, #11]
 8005f46:	3301      	adds	r3, #1
 8005f48:	72fb      	strb	r3, [r7, #11]
          break;
 8005f4a:	e03b      	b.n	8005fc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00b      	beq.n	8005f70 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	7c12      	ldrb	r2, [r2, #16]
 8005f64:	f107 0108 	add.w	r1, r7, #8
 8005f68:	4610      	mov	r0, r2
 8005f6a:	4798      	blx	r3
 8005f6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f6e:	e029      	b.n	8005fc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f70:	6839      	ldr	r1, [r7, #0]
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fa2f 	bl	80063d6 <USBD_CtlError>
            err++;
 8005f78:	7afb      	ldrb	r3, [r7, #11]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	72fb      	strb	r3, [r7, #11]
          break;
 8005f7e:	e021      	b.n	8005fc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00b      	beq.n	8005fa4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	7c12      	ldrb	r2, [r2, #16]
 8005f98:	f107 0108 	add.w	r1, r7, #8
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	4798      	blx	r3
 8005fa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fa2:	e00f      	b.n	8005fc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fa4:	6839      	ldr	r1, [r7, #0]
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fa15 	bl	80063d6 <USBD_CtlError>
            err++;
 8005fac:	7afb      	ldrb	r3, [r7, #11]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	72fb      	strb	r3, [r7, #11]
          break;
 8005fb2:	e007      	b.n	8005fc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005fb4:	6839      	ldr	r1, [r7, #0]
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fa0d 	bl	80063d6 <USBD_CtlError>
          err++;
 8005fbc:	7afb      	ldrb	r3, [r7, #11]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005fc2:	e038      	b.n	8006036 <USBD_GetDescriptor+0x286>
 8005fc4:	e037      	b.n	8006036 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	7c1b      	ldrb	r3, [r3, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d109      	bne.n	8005fe2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd6:	f107 0208 	add.w	r2, r7, #8
 8005fda:	4610      	mov	r0, r2
 8005fdc:	4798      	blx	r3
 8005fde:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005fe0:	e029      	b.n	8006036 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005fe2:	6839      	ldr	r1, [r7, #0]
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f9f6 	bl	80063d6 <USBD_CtlError>
        err++;
 8005fea:	7afb      	ldrb	r3, [r7, #11]
 8005fec:	3301      	adds	r3, #1
 8005fee:	72fb      	strb	r3, [r7, #11]
      break;
 8005ff0:	e021      	b.n	8006036 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	7c1b      	ldrb	r3, [r3, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10d      	bne.n	8006016 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006002:	f107 0208 	add.w	r2, r7, #8
 8006006:	4610      	mov	r0, r2
 8006008:	4798      	blx	r3
 800600a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3301      	adds	r3, #1
 8006010:	2207      	movs	r2, #7
 8006012:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006014:	e00f      	b.n	8006036 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006016:	6839      	ldr	r1, [r7, #0]
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f9dc 	bl	80063d6 <USBD_CtlError>
        err++;
 800601e:	7afb      	ldrb	r3, [r7, #11]
 8006020:	3301      	adds	r3, #1
 8006022:	72fb      	strb	r3, [r7, #11]
      break;
 8006024:	e007      	b.n	8006036 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006026:	6839      	ldr	r1, [r7, #0]
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f9d4 	bl	80063d6 <USBD_CtlError>
      err++;
 800602e:	7afb      	ldrb	r3, [r7, #11]
 8006030:	3301      	adds	r3, #1
 8006032:	72fb      	strb	r3, [r7, #11]
      break;
 8006034:	bf00      	nop
  }

  if (err != 0U)
 8006036:	7afb      	ldrb	r3, [r7, #11]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d11c      	bne.n	8006076 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800603c:	893b      	ldrh	r3, [r7, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d011      	beq.n	8006066 <USBD_GetDescriptor+0x2b6>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	88db      	ldrh	r3, [r3, #6]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00d      	beq.n	8006066 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	88da      	ldrh	r2, [r3, #6]
 800604e:	893b      	ldrh	r3, [r7, #8]
 8006050:	4293      	cmp	r3, r2
 8006052:	bf28      	it	cs
 8006054:	4613      	movcs	r3, r2
 8006056:	b29b      	uxth	r3, r3
 8006058:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800605a:	893b      	ldrh	r3, [r7, #8]
 800605c:	461a      	mov	r2, r3
 800605e:	68f9      	ldr	r1, [r7, #12]
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fa22 	bl	80064aa <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	88db      	ldrh	r3, [r3, #6]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d104      	bne.n	8006078 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fa5b 	bl	800652a <USBD_CtlSendStatus>
 8006074:	e000      	b.n	8006078 <USBD_GetDescriptor+0x2c8>
    return;
 8006076:	bf00      	nop
    }
  }
}
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop

08006080 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	889b      	ldrh	r3, [r3, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d130      	bne.n	80060f4 <USBD_SetAddress+0x74>
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	88db      	ldrh	r3, [r3, #6]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d12c      	bne.n	80060f4 <USBD_SetAddress+0x74>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	885b      	ldrh	r3, [r3, #2]
 800609e:	2b7f      	cmp	r3, #127	; 0x7f
 80060a0:	d828      	bhi.n	80060f4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	885b      	ldrh	r3, [r3, #2]
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	d104      	bne.n	80060c2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80060b8:	6839      	ldr	r1, [r7, #0]
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f98b 	bl	80063d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060c0:	e01d      	b.n	80060fe <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	7bfa      	ldrb	r2, [r7, #15]
 80060c6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80060ca:	7bfb      	ldrb	r3, [r7, #15]
 80060cc:	4619      	mov	r1, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fd59 	bl	8006b86 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fa28 	bl	800652a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80060da:	7bfb      	ldrb	r3, [r7, #15]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d004      	beq.n	80060ea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060e8:	e009      	b.n	80060fe <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060f2:	e004      	b.n	80060fe <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80060f4:	6839      	ldr	r1, [r7, #0]
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f96d 	bl	80063d6 <USBD_CtlError>
  }
}
 80060fc:	bf00      	nop
 80060fe:	bf00      	nop
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
	...

08006108 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	885b      	ldrh	r3, [r3, #2]
 8006116:	b2da      	uxtb	r2, r3
 8006118:	4b41      	ldr	r3, [pc, #260]	; (8006220 <USBD_SetConfig+0x118>)
 800611a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800611c:	4b40      	ldr	r3, [pc, #256]	; (8006220 <USBD_SetConfig+0x118>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d904      	bls.n	800612e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006124:	6839      	ldr	r1, [r7, #0]
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f955 	bl	80063d6 <USBD_CtlError>
 800612c:	e075      	b.n	800621a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006134:	2b02      	cmp	r3, #2
 8006136:	d002      	beq.n	800613e <USBD_SetConfig+0x36>
 8006138:	2b03      	cmp	r3, #3
 800613a:	d023      	beq.n	8006184 <USBD_SetConfig+0x7c>
 800613c:	e062      	b.n	8006204 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800613e:	4b38      	ldr	r3, [pc, #224]	; (8006220 <USBD_SetConfig+0x118>)
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d01a      	beq.n	800617c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006146:	4b36      	ldr	r3, [pc, #216]	; (8006220 <USBD_SetConfig+0x118>)
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2203      	movs	r2, #3
 8006154:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006158:	4b31      	ldr	r3, [pc, #196]	; (8006220 <USBD_SetConfig+0x118>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	4619      	mov	r1, r3
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7ff f9e8 	bl	8005534 <USBD_SetClassConfig>
 8006164:	4603      	mov	r3, r0
 8006166:	2b02      	cmp	r3, #2
 8006168:	d104      	bne.n	8006174 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800616a:	6839      	ldr	r1, [r7, #0]
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f932 	bl	80063d6 <USBD_CtlError>
            return;
 8006172:	e052      	b.n	800621a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f9d8 	bl	800652a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800617a:	e04e      	b.n	800621a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f9d4 	bl	800652a <USBD_CtlSendStatus>
        break;
 8006182:	e04a      	b.n	800621a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006184:	4b26      	ldr	r3, [pc, #152]	; (8006220 <USBD_SetConfig+0x118>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d112      	bne.n	80061b2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006194:	4b22      	ldr	r3, [pc, #136]	; (8006220 <USBD_SetConfig+0x118>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	461a      	mov	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800619e:	4b20      	ldr	r3, [pc, #128]	; (8006220 <USBD_SetConfig+0x118>)
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7ff f9e4 	bl	8005572 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f9bd 	bl	800652a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80061b0:	e033      	b.n	800621a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80061b2:	4b1b      	ldr	r3, [pc, #108]	; (8006220 <USBD_SetConfig+0x118>)
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d01d      	beq.n	80061fc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	4619      	mov	r1, r3
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7ff f9d2 	bl	8005572 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80061ce:	4b14      	ldr	r3, [pc, #80]	; (8006220 <USBD_SetConfig+0x118>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80061d8:	4b11      	ldr	r3, [pc, #68]	; (8006220 <USBD_SetConfig+0x118>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	4619      	mov	r1, r3
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7ff f9a8 	bl	8005534 <USBD_SetClassConfig>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d104      	bne.n	80061f4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80061ea:	6839      	ldr	r1, [r7, #0]
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f8f2 	bl	80063d6 <USBD_CtlError>
            return;
 80061f2:	e012      	b.n	800621a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f998 	bl	800652a <USBD_CtlSendStatus>
        break;
 80061fa:	e00e      	b.n	800621a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f994 	bl	800652a <USBD_CtlSendStatus>
        break;
 8006202:	e00a      	b.n	800621a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f8e5 	bl	80063d6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800620c:	4b04      	ldr	r3, [pc, #16]	; (8006220 <USBD_SetConfig+0x118>)
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff f9ad 	bl	8005572 <USBD_ClrClassConfig>
        break;
 8006218:	bf00      	nop
    }
  }
}
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	20000184 	.word	0x20000184

08006224 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	88db      	ldrh	r3, [r3, #6]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d004      	beq.n	8006240 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006236:	6839      	ldr	r1, [r7, #0]
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f8cc 	bl	80063d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800623e:	e022      	b.n	8006286 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006246:	2b02      	cmp	r3, #2
 8006248:	dc02      	bgt.n	8006250 <USBD_GetConfig+0x2c>
 800624a:	2b00      	cmp	r3, #0
 800624c:	dc03      	bgt.n	8006256 <USBD_GetConfig+0x32>
 800624e:	e015      	b.n	800627c <USBD_GetConfig+0x58>
 8006250:	2b03      	cmp	r3, #3
 8006252:	d00b      	beq.n	800626c <USBD_GetConfig+0x48>
 8006254:	e012      	b.n	800627c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3308      	adds	r3, #8
 8006260:	2201      	movs	r2, #1
 8006262:	4619      	mov	r1, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f920 	bl	80064aa <USBD_CtlSendData>
        break;
 800626a:	e00c      	b.n	8006286 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3304      	adds	r3, #4
 8006270:	2201      	movs	r2, #1
 8006272:	4619      	mov	r1, r3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f918 	bl	80064aa <USBD_CtlSendData>
        break;
 800627a:	e004      	b.n	8006286 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f8a9 	bl	80063d6 <USBD_CtlError>
        break;
 8006284:	bf00      	nop
}
 8006286:	bf00      	nop
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b082      	sub	sp, #8
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800629e:	3b01      	subs	r3, #1
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d81e      	bhi.n	80062e2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	88db      	ldrh	r3, [r3, #6]
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d004      	beq.n	80062b6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80062ac:	6839      	ldr	r1, [r7, #0]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f891 	bl	80063d6 <USBD_CtlError>
        break;
 80062b4:	e01a      	b.n	80062ec <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d005      	beq.n	80062d2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f043 0202 	orr.w	r2, r3, #2
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	330c      	adds	r3, #12
 80062d6:	2202      	movs	r2, #2
 80062d8:	4619      	mov	r1, r3
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f8e5 	bl	80064aa <USBD_CtlSendData>
      break;
 80062e0:	e004      	b.n	80062ec <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f876 	bl	80063d6 <USBD_CtlError>
      break;
 80062ea:	bf00      	nop
  }
}
 80062ec:	bf00      	nop
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	885b      	ldrh	r3, [r3, #2]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d106      	bne.n	8006314 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f90b 	bl	800652a <USBD_CtlSendStatus>
  }
}
 8006314:	bf00      	nop
 8006316:	3708      	adds	r7, #8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800632c:	3b01      	subs	r3, #1
 800632e:	2b02      	cmp	r3, #2
 8006330:	d80b      	bhi.n	800634a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	885b      	ldrh	r3, [r3, #2]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d10c      	bne.n	8006354 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f8f1 	bl	800652a <USBD_CtlSendStatus>
      }
      break;
 8006348:	e004      	b.n	8006354 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f842 	bl	80063d6 <USBD_CtlError>
      break;
 8006352:	e000      	b.n	8006356 <USBD_ClrFeature+0x3a>
      break;
 8006354:	bf00      	nop
  }
}
 8006356:	bf00      	nop
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800635e:	b480      	push	{r7}
 8006360:	b083      	sub	sp, #12
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781a      	ldrb	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	785a      	ldrb	r2, [r3, #1]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	3302      	adds	r3, #2
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	b29a      	uxth	r2, r3
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	3303      	adds	r3, #3
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	b29b      	uxth	r3, r3
 8006388:	021b      	lsls	r3, r3, #8
 800638a:	b29b      	uxth	r3, r3
 800638c:	4413      	add	r3, r2
 800638e:	b29a      	uxth	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	3304      	adds	r3, #4
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	b29a      	uxth	r2, r3
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	3305      	adds	r3, #5
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	021b      	lsls	r3, r3, #8
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	4413      	add	r3, r2
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	3306      	adds	r3, #6
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	3307      	adds	r3, #7
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	021b      	lsls	r3, r3, #8
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	4413      	add	r3, r2
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	80da      	strh	r2, [r3, #6]

}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bc80      	pop	{r7}
 80063d4:	4770      	bx	lr

080063d6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b082      	sub	sp, #8
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80063e0:	2180      	movs	r1, #128	; 0x80
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fb66 	bl	8006ab4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80063e8:	2100      	movs	r1, #0
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fb62 	bl	8006ab4 <USBD_LL_StallEP>
}
 80063f0:	bf00      	nop
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006404:	2300      	movs	r3, #0
 8006406:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d032      	beq.n	8006474 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 f834 	bl	800647c <USBD_GetLen>
 8006414:	4603      	mov	r3, r0
 8006416:	3301      	adds	r3, #1
 8006418:	b29b      	uxth	r3, r3
 800641a:	005b      	lsls	r3, r3, #1
 800641c:	b29a      	uxth	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006422:	7dfb      	ldrb	r3, [r7, #23]
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	75fa      	strb	r2, [r7, #23]
 8006428:	461a      	mov	r2, r3
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	4413      	add	r3, r2
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	7812      	ldrb	r2, [r2, #0]
 8006432:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006434:	7dfb      	ldrb	r3, [r7, #23]
 8006436:	1c5a      	adds	r2, r3, #1
 8006438:	75fa      	strb	r2, [r7, #23]
 800643a:	461a      	mov	r2, r3
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	4413      	add	r3, r2
 8006440:	2203      	movs	r2, #3
 8006442:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006444:	e012      	b.n	800646c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	60fa      	str	r2, [r7, #12]
 800644c:	7dfa      	ldrb	r2, [r7, #23]
 800644e:	1c51      	adds	r1, r2, #1
 8006450:	75f9      	strb	r1, [r7, #23]
 8006452:	4611      	mov	r1, r2
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	440a      	add	r2, r1
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800645c:	7dfb      	ldrb	r3, [r7, #23]
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	75fa      	strb	r2, [r7, #23]
 8006462:	461a      	mov	r2, r3
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	4413      	add	r3, r2
 8006468:	2200      	movs	r2, #0
 800646a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1e8      	bne.n	8006446 <USBD_GetString+0x4e>
    }
  }
}
 8006474:	bf00      	nop
 8006476:	3718      	adds	r7, #24
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006484:	2300      	movs	r3, #0
 8006486:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006488:	e005      	b.n	8006496 <USBD_GetLen+0x1a>
  {
    len++;
 800648a:	7bfb      	ldrb	r3, [r7, #15]
 800648c:	3301      	adds	r3, #1
 800648e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	3301      	adds	r3, #1
 8006494:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1f5      	bne.n	800648a <USBD_GetLen+0xe>
  }

  return len;
 800649e:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bc80      	pop	{r7}
 80064a8:	4770      	bx	lr

080064aa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b084      	sub	sp, #16
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	60f8      	str	r0, [r7, #12]
 80064b2:	60b9      	str	r1, [r7, #8]
 80064b4:	4613      	mov	r3, r2
 80064b6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80064c0:	88fa      	ldrh	r2, [r7, #6]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80064c6:	88fa      	ldrh	r2, [r7, #6]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80064cc:	88fb      	ldrh	r3, [r7, #6]
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	2100      	movs	r1, #0
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f000 fb76 	bl	8006bc4 <USBD_LL_Transmit>

  return USBD_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b084      	sub	sp, #16
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	4613      	mov	r3, r2
 80064ee:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80064f0:	88fb      	ldrh	r3, [r7, #6]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	2100      	movs	r1, #0
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f000 fb64 	bl	8006bc4 <USBD_LL_Transmit>

  return USBD_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b084      	sub	sp, #16
 800650a:	af00      	add	r7, sp, #0
 800650c:	60f8      	str	r0, [r7, #12]
 800650e:	60b9      	str	r1, [r7, #8]
 8006510:	4613      	mov	r3, r2
 8006512:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006514:	88fb      	ldrh	r3, [r7, #6]
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	2100      	movs	r1, #0
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 fb75 	bl	8006c0a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b082      	sub	sp, #8
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2204      	movs	r2, #4
 8006536:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800653a:	2300      	movs	r3, #0
 800653c:	2200      	movs	r2, #0
 800653e:	2100      	movs	r1, #0
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fb3f 	bl	8006bc4 <USBD_LL_Transmit>

  return USBD_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3708      	adds	r7, #8
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2205      	movs	r2, #5
 800655c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006560:	2300      	movs	r3, #0
 8006562:	2200      	movs	r2, #0
 8006564:	2100      	movs	r1, #0
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fb4f 	bl	8006c0a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800657c:	2200      	movs	r2, #0
 800657e:	490e      	ldr	r1, [pc, #56]	; (80065b8 <MX_USB_DEVICE_Init+0x40>)
 8006580:	480e      	ldr	r0, [pc, #56]	; (80065bc <MX_USB_DEVICE_Init+0x44>)
 8006582:	f7fe ff7d 	bl	8005480 <USBD_Init>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800658c:	f7f9 fe66 	bl	800025c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006590:	490b      	ldr	r1, [pc, #44]	; (80065c0 <MX_USB_DEVICE_Init+0x48>)
 8006592:	480a      	ldr	r0, [pc, #40]	; (80065bc <MX_USB_DEVICE_Init+0x44>)
 8006594:	f7fe ff9f 	bl	80054d6 <USBD_RegisterClass>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800659e:	f7f9 fe5d 	bl	800025c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80065a2:	4806      	ldr	r0, [pc, #24]	; (80065bc <MX_USB_DEVICE_Init+0x44>)
 80065a4:	f7fe ffb0 	bl	8005508 <USBD_Start>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80065ae:	f7f9 fe55 	bl	800025c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80065b2:	bf00      	nop
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20000114 	.word	0x20000114
 80065bc:	20000188 	.word	0x20000188
 80065c0:	2000000c 	.word	0x2000000c

080065c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	4603      	mov	r3, r0
 80065cc:	6039      	str	r1, [r7, #0]
 80065ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2212      	movs	r2, #18
 80065d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80065d6:	4b03      	ldr	r3, [pc, #12]	; (80065e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80065d8:	4618      	mov	r0, r3
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	bc80      	pop	{r7}
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	20000130 	.word	0x20000130

080065e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	4603      	mov	r3, r0
 80065f0:	6039      	str	r1, [r7, #0]
 80065f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	2204      	movs	r2, #4
 80065f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80065fa:	4b03      	ldr	r3, [pc, #12]	; (8006608 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	bc80      	pop	{r7}
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	20000144 	.word	0x20000144

0800660c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	4603      	mov	r3, r0
 8006614:	6039      	str	r1, [r7, #0]
 8006616:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006618:	79fb      	ldrb	r3, [r7, #7]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d105      	bne.n	800662a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	4907      	ldr	r1, [pc, #28]	; (8006640 <USBD_FS_ProductStrDescriptor+0x34>)
 8006622:	4808      	ldr	r0, [pc, #32]	; (8006644 <USBD_FS_ProductStrDescriptor+0x38>)
 8006624:	f7ff fee8 	bl	80063f8 <USBD_GetString>
 8006628:	e004      	b.n	8006634 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	4904      	ldr	r1, [pc, #16]	; (8006640 <USBD_FS_ProductStrDescriptor+0x34>)
 800662e:	4805      	ldr	r0, [pc, #20]	; (8006644 <USBD_FS_ProductStrDescriptor+0x38>)
 8006630:	f7ff fee2 	bl	80063f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006634:	4b02      	ldr	r3, [pc, #8]	; (8006640 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006636:	4618      	mov	r0, r3
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	2000044c 	.word	0x2000044c
 8006644:	08006d58 	.word	0x08006d58

08006648 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	4603      	mov	r3, r0
 8006650:	6039      	str	r1, [r7, #0]
 8006652:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	4904      	ldr	r1, [pc, #16]	; (8006668 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006658:	4804      	ldr	r0, [pc, #16]	; (800666c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800665a:	f7ff fecd 	bl	80063f8 <USBD_GetString>
  return USBD_StrDesc;
 800665e:	4b02      	ldr	r3, [pc, #8]	; (8006668 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006660:	4618      	mov	r0, r3
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	2000044c 	.word	0x2000044c
 800666c:	08006d70 	.word	0x08006d70

08006670 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	4603      	mov	r3, r0
 8006678:	6039      	str	r1, [r7, #0]
 800667a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	221a      	movs	r2, #26
 8006680:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006682:	f000 f843 	bl	800670c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006686:	4b02      	ldr	r3, [pc, #8]	; (8006690 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006688:	4618      	mov	r0, r3
 800668a:	3708      	adds	r7, #8
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	20000148 	.word	0x20000148

08006694 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	4603      	mov	r3, r0
 800669c:	6039      	str	r1, [r7, #0]
 800669e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80066a0:	79fb      	ldrb	r3, [r7, #7]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d105      	bne.n	80066b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	4907      	ldr	r1, [pc, #28]	; (80066c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80066aa:	4808      	ldr	r0, [pc, #32]	; (80066cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80066ac:	f7ff fea4 	bl	80063f8 <USBD_GetString>
 80066b0:	e004      	b.n	80066bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	4904      	ldr	r1, [pc, #16]	; (80066c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80066b6:	4805      	ldr	r0, [pc, #20]	; (80066cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80066b8:	f7ff fe9e 	bl	80063f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80066bc:	4b02      	ldr	r3, [pc, #8]	; (80066c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	2000044c 	.word	0x2000044c
 80066cc:	08006d84 	.word	0x08006d84

080066d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	4603      	mov	r3, r0
 80066d8:	6039      	str	r1, [r7, #0]
 80066da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80066dc:	79fb      	ldrb	r3, [r7, #7]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d105      	bne.n	80066ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	4907      	ldr	r1, [pc, #28]	; (8006704 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80066e6:	4808      	ldr	r0, [pc, #32]	; (8006708 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80066e8:	f7ff fe86 	bl	80063f8 <USBD_GetString>
 80066ec:	e004      	b.n	80066f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	4904      	ldr	r1, [pc, #16]	; (8006704 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80066f2:	4805      	ldr	r0, [pc, #20]	; (8006708 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80066f4:	f7ff fe80 	bl	80063f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80066f8:	4b02      	ldr	r3, [pc, #8]	; (8006704 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	2000044c 	.word	0x2000044c
 8006708:	08006d90 	.word	0x08006d90

0800670c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006712:	4b0f      	ldr	r3, [pc, #60]	; (8006750 <Get_SerialNum+0x44>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006718:	4b0e      	ldr	r3, [pc, #56]	; (8006754 <Get_SerialNum+0x48>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800671e:	4b0e      	ldr	r3, [pc, #56]	; (8006758 <Get_SerialNum+0x4c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4413      	add	r3, r2
 800672a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d009      	beq.n	8006746 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006732:	2208      	movs	r2, #8
 8006734:	4909      	ldr	r1, [pc, #36]	; (800675c <Get_SerialNum+0x50>)
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 f814 	bl	8006764 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800673c:	2204      	movs	r2, #4
 800673e:	4908      	ldr	r1, [pc, #32]	; (8006760 <Get_SerialNum+0x54>)
 8006740:	68b8      	ldr	r0, [r7, #8]
 8006742:	f000 f80f 	bl	8006764 <IntToUnicode>
  }
}
 8006746:	bf00      	nop
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	1ffff7e8 	.word	0x1ffff7e8
 8006754:	1ffff7ec 	.word	0x1ffff7ec
 8006758:	1ffff7f0 	.word	0x1ffff7f0
 800675c:	2000014a 	.word	0x2000014a
 8006760:	2000015a 	.word	0x2000015a

08006764 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	4613      	mov	r3, r2
 8006770:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006772:	2300      	movs	r3, #0
 8006774:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006776:	2300      	movs	r3, #0
 8006778:	75fb      	strb	r3, [r7, #23]
 800677a:	e027      	b.n	80067cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	0f1b      	lsrs	r3, r3, #28
 8006780:	2b09      	cmp	r3, #9
 8006782:	d80b      	bhi.n	800679c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	0f1b      	lsrs	r3, r3, #28
 8006788:	b2da      	uxtb	r2, r3
 800678a:	7dfb      	ldrb	r3, [r7, #23]
 800678c:	005b      	lsls	r3, r3, #1
 800678e:	4619      	mov	r1, r3
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	440b      	add	r3, r1
 8006794:	3230      	adds	r2, #48	; 0x30
 8006796:	b2d2      	uxtb	r2, r2
 8006798:	701a      	strb	r2, [r3, #0]
 800679a:	e00a      	b.n	80067b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	0f1b      	lsrs	r3, r3, #28
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	7dfb      	ldrb	r3, [r7, #23]
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	4619      	mov	r1, r3
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	440b      	add	r3, r1
 80067ac:	3237      	adds	r2, #55	; 0x37
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	011b      	lsls	r3, r3, #4
 80067b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80067b8:	7dfb      	ldrb	r3, [r7, #23]
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	3301      	adds	r3, #1
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	4413      	add	r3, r2
 80067c2:	2200      	movs	r2, #0
 80067c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80067c6:	7dfb      	ldrb	r3, [r7, #23]
 80067c8:	3301      	adds	r3, #1
 80067ca:	75fb      	strb	r3, [r7, #23]
 80067cc:	7dfa      	ldrb	r2, [r7, #23]
 80067ce:	79fb      	ldrb	r3, [r7, #7]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d3d3      	bcc.n	800677c <IntToUnicode+0x18>
  }
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	bc80      	pop	{r7}
 80067de:	4770      	bx	lr

080067e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a0d      	ldr	r2, [pc, #52]	; (8006824 <HAL_PCD_MspInit+0x44>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d113      	bne.n	800681a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80067f2:	4b0d      	ldr	r3, [pc, #52]	; (8006828 <HAL_PCD_MspInit+0x48>)
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	4a0c      	ldr	r2, [pc, #48]	; (8006828 <HAL_PCD_MspInit+0x48>)
 80067f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80067fc:	61d3      	str	r3, [r2, #28]
 80067fe:	4b0a      	ldr	r3, [pc, #40]	; (8006828 <HAL_PCD_MspInit+0x48>)
 8006800:	69db      	ldr	r3, [r3, #28]
 8006802:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800680a:	2200      	movs	r2, #0
 800680c:	2100      	movs	r1, #0
 800680e:	2014      	movs	r0, #20
 8006810:	f7f9 fef3 	bl	80005fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006814:	2014      	movs	r0, #20
 8006816:	f7f9 ff0c 	bl	8000632 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800681a:	bf00      	nop
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	40005c00 	.word	0x40005c00
 8006828:	40021000 	.word	0x40021000

0800682c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8006840:	4619      	mov	r1, r3
 8006842:	4610      	mov	r0, r2
 8006844:	f7fe fea8 	bl	8005598 <USBD_LL_SetupStage>
}
 8006848:	bf00      	nop
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 8006862:	78fa      	ldrb	r2, [r7, #3]
 8006864:	6879      	ldr	r1, [r7, #4]
 8006866:	4613      	mov	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	00db      	lsls	r3, r3, #3
 800686e:	440b      	add	r3, r1
 8006870:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	78fb      	ldrb	r3, [r7, #3]
 8006878:	4619      	mov	r1, r3
 800687a:	f7fe feda 	bl	8005632 <USBD_LL_DataOutStage>
}
 800687e:	bf00      	nop
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b082      	sub	sp, #8
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	460b      	mov	r3, r1
 8006890:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 8006898:	78fa      	ldrb	r2, [r7, #3]
 800689a:	6879      	ldr	r1, [r7, #4]
 800689c:	4613      	mov	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	00db      	lsls	r3, r3, #3
 80068a4:	440b      	add	r3, r1
 80068a6:	3324      	adds	r3, #36	; 0x24
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	78fb      	ldrb	r3, [r7, #3]
 80068ac:	4619      	mov	r1, r3
 80068ae:	f7fe ff31 	bl	8005714 <USBD_LL_DataInStage>
}
 80068b2:	bf00      	nop
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b082      	sub	sp, #8
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff f841 	bl	8005950 <USBD_LL_SOF>
}
 80068ce:	bf00      	nop
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b084      	sub	sp, #16
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80068de:	2301      	movs	r3, #1
 80068e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	799b      	ldrb	r3, [r3, #6]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d001      	beq.n	80068ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80068ea:	f7f9 fcb7 	bl	800025c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068f4:	7bfa      	ldrb	r2, [r7, #15]
 80068f6:	4611      	mov	r1, r2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7fe fff1 	bl	80058e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006904:	4618      	mov	r0, r3
 8006906:	f7fe ffaa 	bl	800585e <USBD_LL_Reset>
}
 800690a:	bf00      	nop
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
	...

08006914 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006922:	4618      	mov	r0, r3
 8006924:	f7fe ffeb 	bl	80058fe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	7a9b      	ldrb	r3, [r3, #10]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d005      	beq.n	800693c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006930:	4b04      	ldr	r3, [pc, #16]	; (8006944 <HAL_PCD_SuspendCallback+0x30>)
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	4a03      	ldr	r2, [pc, #12]	; (8006944 <HAL_PCD_SuspendCallback+0x30>)
 8006936:	f043 0306 	orr.w	r3, r3, #6
 800693a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800693c:	bf00      	nop
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	e000ed00 	.word	0xe000ed00

08006948 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006956:	4618      	mov	r0, r3
 8006958:	f7fe ffe5 	bl	8005926 <USBD_LL_Resume>
}
 800695c:	bf00      	nop
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800696c:	4a1f      	ldr	r2, [pc, #124]	; (80069ec <USBD_LL_Init+0x88>)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8c2 32d4 	str.w	r3, [r2, #724]	; 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a1d      	ldr	r2, [pc, #116]	; (80069ec <USBD_LL_Init+0x88>)
 8006978:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800697c:	4b1b      	ldr	r3, [pc, #108]	; (80069ec <USBD_LL_Init+0x88>)
 800697e:	4a1c      	ldr	r2, [pc, #112]	; (80069f0 <USBD_LL_Init+0x8c>)
 8006980:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006982:	4b1a      	ldr	r3, [pc, #104]	; (80069ec <USBD_LL_Init+0x88>)
 8006984:	2208      	movs	r2, #8
 8006986:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006988:	4b18      	ldr	r3, [pc, #96]	; (80069ec <USBD_LL_Init+0x88>)
 800698a:	2202      	movs	r2, #2
 800698c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800698e:	4b17      	ldr	r3, [pc, #92]	; (80069ec <USBD_LL_Init+0x88>)
 8006990:	2200      	movs	r2, #0
 8006992:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006994:	4b15      	ldr	r3, [pc, #84]	; (80069ec <USBD_LL_Init+0x88>)
 8006996:	2200      	movs	r2, #0
 8006998:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800699a:	4b14      	ldr	r3, [pc, #80]	; (80069ec <USBD_LL_Init+0x88>)
 800699c:	2200      	movs	r2, #0
 800699e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80069a0:	4812      	ldr	r0, [pc, #72]	; (80069ec <USBD_LL_Init+0x88>)
 80069a2:	f7f9 fe60 	bl	8000666 <HAL_PCD_Init>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d001      	beq.n	80069b0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80069ac:	f7f9 fc56 	bl	800025c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80069b6:	2318      	movs	r3, #24
 80069b8:	2200      	movs	r2, #0
 80069ba:	2100      	movs	r1, #0
 80069bc:	f7fb fb5b 	bl	8002076 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80069c6:	2358      	movs	r3, #88	; 0x58
 80069c8:	2200      	movs	r2, #0
 80069ca:	2180      	movs	r1, #128	; 0x80
 80069cc:	f7fb fb53 	bl	8002076 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80069d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069da:	2200      	movs	r2, #0
 80069dc:	2181      	movs	r1, #129	; 0x81
 80069de:	f7fb fb4a 	bl	8002076 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3708      	adds	r7, #8
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	2000064c 	.word	0x2000064c
 80069f0:	40005c00 	.word	0x40005c00

080069f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7f9 ff21 	bl	8000852 <HAL_PCD_Start>
 8006a10:	4603      	mov	r3, r0
 8006a12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 f93a 	bl	8006c90 <USBD_Get_USB_Status>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a20:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	4608      	mov	r0, r1
 8006a34:	4611      	mov	r1, r2
 8006a36:	461a      	mov	r2, r3
 8006a38:	4603      	mov	r3, r0
 8006a3a:	70fb      	strb	r3, [r7, #3]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	70bb      	strb	r3, [r7, #2]
 8006a40:	4613      	mov	r3, r2
 8006a42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006a52:	78bb      	ldrb	r3, [r7, #2]
 8006a54:	883a      	ldrh	r2, [r7, #0]
 8006a56:	78f9      	ldrb	r1, [r7, #3]
 8006a58:	f7fa f875 	bl	8000b46 <HAL_PCD_EP_Open>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 f914 	bl	8006c90 <USBD_Get_USB_Status>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a90:	78fa      	ldrb	r2, [r7, #3]
 8006a92:	4611      	mov	r1, r2
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fa f8b3 	bl	8000c00 <HAL_PCD_EP_Close>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a9e:	7bfb      	ldrb	r3, [r7, #15]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f000 f8f5 	bl	8006c90 <USBD_Get_USB_Status>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006aaa:	7bbb      	ldrb	r3, [r7, #14]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ace:	78fa      	ldrb	r2, [r7, #3]
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fa f944 	bl	8000d60 <HAL_PCD_EP_SetStall>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 f8d6 	bl	8006c90 <USBD_Get_USB_Status>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ae8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b084      	sub	sp, #16
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	460b      	mov	r3, r1
 8006afc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006afe:	2300      	movs	r3, #0
 8006b00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b0c:	78fa      	ldrb	r2, [r7, #3]
 8006b0e:	4611      	mov	r1, r2
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7fa f985 	bl	8000e20 <HAL_PCD_EP_ClrStall>
 8006b16:	4603      	mov	r3, r0
 8006b18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 f8b7 	bl	8006c90 <USBD_Get_USB_Status>
 8006b22:	4603      	mov	r3, r0
 8006b24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b26:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006b44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	da0b      	bge.n	8006b64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006b4c:	78fb      	ldrb	r3, [r7, #3]
 8006b4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b52:	68f9      	ldr	r1, [r7, #12]
 8006b54:	4613      	mov	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	00db      	lsls	r3, r3, #3
 8006b5c:	440b      	add	r3, r1
 8006b5e:	3312      	adds	r3, #18
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	e00b      	b.n	8006b7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006b64:	78fb      	ldrb	r3, [r7, #3]
 8006b66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b6a:	68f9      	ldr	r1, [r7, #12]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	00db      	lsls	r3, r3, #3
 8006b74:	440b      	add	r3, r1
 8006b76:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8006b7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bc80      	pop	{r7}
 8006b84:	4770      	bx	lr

08006b86 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b084      	sub	sp, #16
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ba0:	78fa      	ldrb	r2, [r7, #3]
 8006ba2:	4611      	mov	r1, r2
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7f9 ffaa 	bl	8000afe <HAL_PCD_SetAddress>
 8006baa:	4603      	mov	r3, r0
 8006bac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 f86d 	bl	8006c90 <USBD_Get_USB_Status>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bba:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	607a      	str	r2, [r7, #4]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	72fb      	strb	r3, [r7, #11]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006be6:	893b      	ldrh	r3, [r7, #8]
 8006be8:	7af9      	ldrb	r1, [r7, #11]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	f7fa f881 	bl	8000cf2 <HAL_PCD_EP_Transmit>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bf4:	7dfb      	ldrb	r3, [r7, #23]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 f84a 	bl	8006c90 <USBD_Get_USB_Status>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c00:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b086      	sub	sp, #24
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	60f8      	str	r0, [r7, #12]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	461a      	mov	r2, r3
 8006c16:	460b      	mov	r3, r1
 8006c18:	72fb      	strb	r3, [r7, #11]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006c2c:	893b      	ldrh	r3, [r7, #8]
 8006c2e:	7af9      	ldrb	r1, [r7, #11]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	f7fa f82d 	bl	8000c90 <HAL_PCD_EP_Receive>
 8006c36:	4603      	mov	r3, r0
 8006c38:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c3a:	7dfb      	ldrb	r3, [r7, #23]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 f827 	bl	8006c90 <USBD_Get_USB_Status>
 8006c42:	4603      	mov	r3, r0
 8006c44:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c46:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006c58:	4b02      	ldr	r3, [pc, #8]	; (8006c64 <USBD_static_malloc+0x14>)
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bc80      	pop	{r7}
 8006c62:	4770      	bx	lr
 8006c64:	20000924 	.word	0x20000924

08006c68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]

}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bc80      	pop	{r7}
 8006c78:	4770      	bx	lr

08006c7a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	460b      	mov	r3, r1
 8006c84:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006c86:	bf00      	nop
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bc80      	pop	{r7}
 8006c8e:	4770      	bx	lr

08006c90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	4603      	mov	r3, r0
 8006c98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006c9e:	79fb      	ldrb	r3, [r7, #7]
 8006ca0:	2b03      	cmp	r3, #3
 8006ca2:	d817      	bhi.n	8006cd4 <USBD_Get_USB_Status+0x44>
 8006ca4:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <USBD_Get_USB_Status+0x1c>)
 8006ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006caa:	bf00      	nop
 8006cac:	08006cbd 	.word	0x08006cbd
 8006cb0:	08006cc3 	.word	0x08006cc3
 8006cb4:	08006cc9 	.word	0x08006cc9
 8006cb8:	08006ccf 	.word	0x08006ccf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8006cc0:	e00b      	b.n	8006cda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	73fb      	strb	r3, [r7, #15]
    break;
 8006cc6:	e008      	b.n	8006cda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	73fb      	strb	r3, [r7, #15]
    break;
 8006ccc:	e005      	b.n	8006cda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006cce:	2302      	movs	r3, #2
 8006cd0:	73fb      	strb	r3, [r7, #15]
    break;
 8006cd2:	e002      	b.n	8006cda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	73fb      	strb	r3, [r7, #15]
    break;
 8006cd8:	bf00      	nop
  }
  return usb_status;
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bc80      	pop	{r7}
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop

08006ce8 <memset>:
 8006ce8:	4603      	mov	r3, r0
 8006cea:	4402      	add	r2, r0
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d100      	bne.n	8006cf2 <memset+0xa>
 8006cf0:	4770      	bx	lr
 8006cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8006cf6:	e7f9      	b.n	8006cec <memset+0x4>

08006cf8 <__libc_init_array>:
 8006cf8:	b570      	push	{r4, r5, r6, lr}
 8006cfa:	2600      	movs	r6, #0
 8006cfc:	4d0c      	ldr	r5, [pc, #48]	; (8006d30 <__libc_init_array+0x38>)
 8006cfe:	4c0d      	ldr	r4, [pc, #52]	; (8006d34 <__libc_init_array+0x3c>)
 8006d00:	1b64      	subs	r4, r4, r5
 8006d02:	10a4      	asrs	r4, r4, #2
 8006d04:	42a6      	cmp	r6, r4
 8006d06:	d109      	bne.n	8006d1c <__libc_init_array+0x24>
 8006d08:	f000 f81a 	bl	8006d40 <_init>
 8006d0c:	2600      	movs	r6, #0
 8006d0e:	4d0a      	ldr	r5, [pc, #40]	; (8006d38 <__libc_init_array+0x40>)
 8006d10:	4c0a      	ldr	r4, [pc, #40]	; (8006d3c <__libc_init_array+0x44>)
 8006d12:	1b64      	subs	r4, r4, r5
 8006d14:	10a4      	asrs	r4, r4, #2
 8006d16:	42a6      	cmp	r6, r4
 8006d18:	d105      	bne.n	8006d26 <__libc_init_array+0x2e>
 8006d1a:	bd70      	pop	{r4, r5, r6, pc}
 8006d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d20:	4798      	blx	r3
 8006d22:	3601      	adds	r6, #1
 8006d24:	e7ee      	b.n	8006d04 <__libc_init_array+0xc>
 8006d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d2a:	4798      	blx	r3
 8006d2c:	3601      	adds	r6, #1
 8006d2e:	e7f2      	b.n	8006d16 <__libc_init_array+0x1e>
 8006d30:	08006dc4 	.word	0x08006dc4
 8006d34:	08006dc4 	.word	0x08006dc4
 8006d38:	08006dc4 	.word	0x08006dc4
 8006d3c:	08006dc8 	.word	0x08006dc8

08006d40 <_init>:
 8006d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d42:	bf00      	nop
 8006d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d46:	bc08      	pop	{r3}
 8006d48:	469e      	mov	lr, r3
 8006d4a:	4770      	bx	lr

08006d4c <_fini>:
 8006d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d4e:	bf00      	nop
 8006d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d52:	bc08      	pop	{r3}
 8006d54:	469e      	mov	lr, r3
 8006d56:	4770      	bx	lr
